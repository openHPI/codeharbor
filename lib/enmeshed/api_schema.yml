# https://github.com/nmshd/connector/blob/main/src/modules/coreHttpApi/openapi.yml
# current version: https://github.com/nmshd/connector/blob/6.14.3/src/modules/coreHttpApi/openapi.yml

openapi: 3.1.0

servers:
  - url: /
    description: Local Connector API

info:
  version: "2.0"
  title: Connector
  description: |
    This API is work in progress and might be changed without further notice on any time.

    You can retrieve the [yaml](/docs/yaml) or [json](/docs/json) representation of this specification by following the corresponding links.

    View this documenation in [rapidoc](/docs/rapidoc) or [swagger](/docs/swagger).

  license:
    name: MIT
    url: https://raw.githubusercontent.com/nmshd/connector/main/LICENSE
  contact:
    name: j&s-soft AG
    email: info@js-soft.com
    url: https://www.js-soft.com/

paths:
  /health:
    get:
      security: []
      operationId: getHealth
      description: Show the service health.
      tags:
        - Monitoring
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ConnectorHealth"
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        403:
          $ref: "#/components/responses/Forbidden"

  /Monitoring/Version:
    get:
      operationId: getVersion
      description: Show the Connector version information.
      tags:
        - Monitoring
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ConnectorVersion"
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /Monitoring/Requests:
    get:
      operationId: getRequests
      description: Show the number of requests and the status codes that were returned by the Connector.
      tags:
        - Monitoring
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  since:
                    type: string
                    format: date-time
                    description: The time since when the data was collected (typically this is the startup time of the Connector).
                  requestCount:
                    type: number
                    example: 507
                    description: The number of requests the Connector has processed.
                  requestCountByStatus:
                    type: object
                    additionalProperties:
                      type: number
                    example: { "200": 500, "401": 2, "500": 5 }
                required:
                  - since
                  - requestCount
                  - responseCountByStatus
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /Monitoring/Support:
    get:
      operationId: getSupportInfo
      description: Show support Information.
      tags:
        - Monitoring
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: object
                    $ref: "#/components/schemas/ConnectorVersion"
                  health:
                    type: object
                    $ref: "#/components/schemas/ConnectorHealth"
                  configuration:
                    type: object
                    example:
                      { "database": { "connectionString": "**********************************", "dbName": "accountName" }, "modules": { "coreHttpApi": { "enabled": true } } }
                  identityInfo:
                    type: object
                    $ref: "#/components/schemas/IdentityInfo"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  # ------------------- Account -------------------

  /api/v2/Account/IdentityInfo:
    get:
      operationId: getIdentityInfo
      description: Shows the Account Information.
      tags:
        - Account
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    nullable: false
                    $ref: "#/components/schemas/IdentityInfo"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Account/SyncInfo:
    get:
      operationId: getSyncInfo
      description: show information about the last completed sync run
      tags:
        - Account
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      lastSyncRun:
                        type: object
                        properties:
                          completedAt:
                            type: string
                            format: date-time
                        required:
                          - syncTime
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Account/Sync:
    post:
      operationId: sync
      description: >
        Syncs the Connector messages and relationships with the Backbone.
        Checks for new relationships as well as incoming changes of existing ones.
        Checks for new or updated Messages.
      tags:
        - Account
      responses:
        204:
          description: No content.
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  # ------------------- Attributes -------------------

  /api/v2/Attributes/CanCreate:
    put:
      operationId: canCreateRepositoryAttribute
      description: "Checks if a Repository Attribute can be created with the given parameters."
      tags:
        - Attributes
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                content:
                  type: object
                  additionalProperties: false
                  required:
                    - value
                  properties:
                    value:
                      $ref: "#/components/schemas/AttributeValue"
                    tags:
                      $ref: "#/components/schemas/IdentityAttributeContent_tags"
                    validFrom:
                      $ref: "#/components/schemas/AttributeContent_validFrom"
                    validTo:
                      $ref: "#/components/schemas/AttributeContent_validTo"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/CanCreateRepositoryAttributeResponse"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes:
    post:
      operationId: createRepositoryAttribute
      description: "Creates a Repository Attribute."
      tags:
        - Attributes
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                content:
                  type: object
                  additionalProperties: false
                  required:
                    - value
                  properties:
                    value:
                      $ref: "#/components/schemas/AttributeValue"
                    tags:
                      $ref: "#/components/schemas/IdentityAttributeContent_tags"
                    validFrom:
                      $ref: "#/components/schemas/AttributeContent_validFrom"
                    validTo:
                      $ref: "#/components/schemas/AttributeContent_validTo"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                properties:
                  result:
                    $ref: "#/components/schemas/CreateRepositoryAttributeResponse"

          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getAttributes
      description: Query Attributes
      tags:
        - Attributes
      parameters:
        - name: createdAt
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.tags
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.owner
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.validFrom
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.validTo
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.key
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.isTechnical
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/BooleanFilter"
        - name: content.confidentiality
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.value.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: succeeds
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: succeededBy
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.requestReference
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.peer
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.sourceAttribute
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/Own/Repository:
    get:
      operationId: getOwnRepositoryAttributes
      tags:
        - Attributes
      parameters:
        - name: createdAt
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.tags
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.validFrom
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.validTo
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.value.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: deletionInfo
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: deletionInfo.deletionStatus
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: deletionInfo.deletionDate"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: onlyLatestVersions
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/Own/Shared/Identity:
    get:
      operationId: getOwnSharedIdentityAttributes
      tags:
        - Attributes
      parameters:
        - name: createdAt
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.tags
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.validFrom
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.validTo
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.key
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.isTechnical
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/BooleanFilter"
        - name: content.confidentiality
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.value.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.requestReference
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.notificationReference
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.sourceAttribute
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: peer
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: onlyValid
          in: query
          required: false
          schema:
            type: boolean
        - name: hideTechnical
          in: query
          required: false
          schema:
            type: boolean
        - name: onlyLatestVersions
          description: Whether to only get the latest version of the attribute for each peer
          in: query
          required: false
          schema:
            type: boolean
            default: true

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/Peer/Shared/Identity:
    get:
      operationId: getPeerSharedIdentityAttributes
      tags:
        - Attributes

      parameters:
        - name: createdAt
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.tags
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.validFrom
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.validTo
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DateFilter"
        - name: content.key
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.isTechnical
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/BooleanFilter"
        - name: content.confidentiality
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.value.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.requestReference
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.notificationReference
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: peer
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - name: onlyValid
          in: query
          required: false
          schema:
            type: boolean
        - name: hideTechnical
          in: query
          required: false
          schema:
            type: boolean
        - name: onlyLatestVersions
          description: Whether to only get the latest version of the attribute for each peer
          in: query
          required: false
          schema:
            type: boolean
            default: true

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/{id}/Versions:
    get:
      operationId: getVersionsOfAttribute
      tags:
        - Attributes
      parameters:
        - in: path
          name: id
          description: The ID of the Attribute.
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/{id}/Versions/Shared:
    get:
      operationId: getSharedVersionsOfAttribute
      tags:
        - Attributes
      parameters:
        - in: path
          name: id
          description: The ID of the Attribute.
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
        - in: query
          name: peers
          description: An array of peers
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Address"
        - in: query
          name: onlyLatestVersions
          description: Whether to only get the latest version of the attribute for each peer
          required: false
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/{predecessorId}/Succeed:
    post:
      operationId: succeedAttribute
      description: Succeeds either a relationship attribute or a repository attribute.
      tags:
        - Attributes
      parameters:
        - name: predecessorId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
          description: ID of the predecessor attribute
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                successorContent:
                  type: object
                  additionalProperties: false
                  required:
                    - value
                  properties:
                    value:
                      $ref: "#/components/schemas/AttributeValue"
                    tags:
                      $ref: "#/components/schemas/IdentityAttributeContent_tags"
                    validFrom:
                      $ref: "#/components/schemas/AttributeContent_validFrom"
                    validTo:
                      $ref: "#/components/schemas/AttributeContent_validTo"

      responses:
        201:
          description: |
            Success. Succeeding a relationship/repository attribute returns the predecessor and successor.
            Additionally, for relationship attributes the ID of the notification sent to the peer is returned.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - result
                properties:
                  result:
                    type: object
                    additionalProperties: false
                    required:
                      - predecessor
                      - successor
                    properties:
                      predecessor:
                        $ref: "#/components/schemas/Attribute"
                      successor:
                        $ref: "#/components/schemas/Attribute"
                      notificationId:
                        $ref: "#/components/schemas/NotificationID"

          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Attributes/{attributeId}/NotifyPeer:
    post:
      operationId: notifyPeerAboutRepositoryAttributeSuccession
      description: |
        Notifies a peer about a succeeded and previously shared repository
        attribute.
      tags:
        - Attributes
      parameters:
        - name: attributeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
          description: ID of the succeeded repository attribute
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                peer:
                  $ref: "#/components/schemas/Address"

      responses:
        201:
          description: |
            "Success. Returns the successor and predecessor own shared identity
            attributes as well as the ID of the notification sent to the peer."
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - result
                properties:
                  result:
                    type: object
                    additionalProperties: false
                    required:
                      - predecessor
                      - successor
                    properties:
                      predecessor:
                        $ref: "#/components/schemas/Attribute"
                      successor:
                        $ref: "#/components/schemas/Attribute"
                      notificationId:
                        $ref: "#/components/schemas/NotificationID"

          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Attributes/{id}:
    get:
      operationId: getAttribute
      description: Fetches the attribute with the given `id`.
      tags:
        - Attributes
      parameters:
        - in: path
          name: id
          description: The ID of the Attribute.
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      operationId: deleteRepositoryAttribute
      description: Delete a repository attribute.
      tags:
        - Attributes
      parameters:
        - in: path
          name: id
          description: The ID of the repository attribute to delete.
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
      responses:
        204:
          description: Success. Deleting a repository attribute.
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Attributes/Own/Shared/{id}:
    delete:
      operationId: deleteOwnSharedAttributeAndNotifyPeer
      description: Delete an own shared attribute and notify the peer.
      tags:
        - Attributes
      parameters:
        - in: path
          name: id
          description: The ID of the own shared attribute to delete.
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
      responses:
        200:
          description: |
            Success. Deleting an own shared attribute and notifying the peer returns the notificationId of the send notification.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - result
                properties:
                  result:
                    nullable: false
                    type: object
                    additionalProperties: false
                    required:
                      - id
                    properties:
                      id:
                        $ref: "#/components/schemas/NotificationID"

          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Attributes/Peer/Shared/{id}:
    delete:
      operationId: deletePeerSharedAttributeAndNotifyOwner
      description: Delete an peer shared attribute and notify the owner.
      tags:
        - Attributes
      parameters:
        - in: path
          name: id
          description: The ID of the peer shared attribute to delete.
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
      responses:
        200:
          description: |
            Success. Deleting an peer shared attribute and notifying the owner returns the notificationId of the send notification.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - result
                properties:
                  result:
                    nullable: false
                    type: object
                    additionalProperties: false
                    required:
                      - id
                    properties:
                      id:
                        $ref: "#/components/schemas/NotificationID"

          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Attributes/ThirdParty/{id}:
    delete:
      operationId: deleteThirdPartyRelationshipAttributeAndNotifyPeer
      description: Delete a ThirdPartyRelationshipAttribute and notify the peer.
      tags:
        - Attributes
      parameters:
        - in: path
          name: id
          description: The ID of the ThirdPartyRelationshipAttribute to delete.
          required: true
          schema:
            $ref: "#/components/schemas/AttributeID"
      responses:
        200:
          description: |
            Success. Deleting a ThirdPartyRelationshipAttribute and notifying the peer returns the NotificationId of the sent Notification.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - result
                properties:
                  result:
                    nullable: false
                    type: object
                    additionalProperties: false
                    required:
                      - id
                    properties:
                      id:
                        $ref: "#/components/schemas/NotificationID"

          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Attributes/Valid:
    get:
      operationId: getValidAttributes
      description: List valid Attributes
      tags:
        - Attributes
      parameters:
        - name: content.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.tags
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.owner
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.key
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.isTechnical
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/BooleanFilter"
        - name: content.confidentiality
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: content.value.@type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: succeeds
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: succeededBy
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.requestReference
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.peer
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
        - name: shareInfo.sourceAttribute
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TextFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/TagCollection:
    get:
      operationId: getAttributeTagCollection
      description: List valid Tags for Attributes
      tags:
        - Attributes
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/AttributeTagCollection"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/ExecuteIdentityAttributeQuery:
    post:
      operationId: executeIdentityQuery
      description: Execute an IdentityAttributeQuery
      tags:
        - Attributes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: object
                  properties:
                    tags:
                      description: The tags of the attributes that will be filtered.
                      items:
                        type: string
                      type: array
                    validFrom:
                      $ref: "#/components/schemas/AttributeContent_validFrom"
                    validTo:
                      $ref: "#/components/schemas/AttributeContent_validTo"
                    valueType:
                      description: The valueType of the attribute.
                      type: string
                  required:
                    - valueType
              required:
                - query
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/ExecuteRelationshipAttributeQuery:
    post:
      operationId: executeRelationshipQuery
      description: Execute a RelationshipAttributeQuery
      tags:
        - Attributes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: object
                  properties:
                    key:
                      description: The key of the relationship attribute.
                      type: string
                    owner:
                      description: The owner of the relationship attribute.
                      type: string
                    validFrom:
                      $ref: "#/components/schemas/AttributeContent_validFrom"
                    validTo:
                      $ref: "#/components/schemas/AttributeContent_validTo"
                    attributeCreationHints:
                      description: This describes how to create an attribute if it does not exist.
                      type: object
                      properties:
                        confidentiality:
                          $ref: "#/components/schemas/Confidentiality"
                        description:
                          type: string
                        isTechnical:
                          type: boolean
                        title:
                          type: string
                        valueType:
                          description: The valueType of the attribute that will be created.
                          type: string
                        valueHints:
                          type: object
                          properties:
                            "@type":
                              type: string
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                            editHelp:
                              type: string
                            max:
                              type: number
                            min:
                              type: number
                            pattern:
                              type: string
                            values:
                              items:
                                type: object
                                properties:
                                  displayName:
                                    type: string
                                  key:
                                    oneOf:
                                      - type: string
                                      - type: number
                                      - type: boolean
                                required:
                                  - key
                                  - displayName
                              type: array
                          required:
                            - "@type"
                      required:
                        - title
                        - valueType
                        - confidentiality
                  required:
                    - key
                    - owner
                    - attributeCreationHints
              required:
                - query
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/ExecuteThirdPartyRelationshipAttributeQuery:
    post:
      operationId: executeThirdPartyRelationshipQuery
      description: Execute a ThirdPartyAttributeQuery
      tags:
        - Attributes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: object
                  properties:
                    key:
                      description: The key of the relationship attribute.
                      type: string
                    owner:
                      description: The owner of the relationship attribute.
                      $ref: "#/components/schemas/Address"
                    thirdParty:
                      description: An array of third party addresses the relationship attribute should be searched in. If the given `key` is found in multiple relationships, the user can decide which one to send.
                      type: array
                      items:
                        $ref: "#/components/schemas/Address"
                    validFrom:
                      $ref: "#/components/schemas/AttributeContent_validFrom"
                    validTo:
                      $ref: "#/components/schemas/AttributeContent_validTo"
                  required:
                    - key
                    - owner
                    - thirdParty
              required:
                - query
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/ExecuteIQLQuery:
    post:
      operationId: executeIQLQuery
      description: Execute IQL Query
      tags:
        - Attributes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: object
                  properties:
                    queryString:
                      description: IQL Query String
                      type: string
                      example: "PhoneNumber && #emergency"

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Attributes/ValidateIQLQuery:
    post:
      operationId: validateIQLQuery
      description: Validate IQL Query
      tags:
        - Attributes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: object
                  properties:
                    queryString:
                      description: IQL Query String
                      type: string
                      example: "PhoneNumber && #emergency"

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                      location:
                        type: object
                        properties:
                          start:
                            type: object
                            properties:
                              column:
                                type: number
                              line:
                                type: number
                              offset:
                                type: number
                          end:
                            type: object
                            properties:
                              column:
                                type: number
                              line:
                                type: number
                              offset:
                                type: number
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  # ------------------- Challenges -------------------

  /api/v2/Challenges:
    post:
      operationId: createChallenge
      description: Create a signed challenge.
      tags:
        - Challenges
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateRelationshipChallengeRequest"
                - $ref: "#/components/schemas/CreateIdentityChallengeRequest"
                - $ref: "#/components/schemas/CreateDeviceChallengeRequest"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    nullable: false
                    $ref: "#/components/schemas/SignedChallenge"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Challenges/Validate:
    post:
      operationId: validateChallenge
      description: Validate a challenge.
      tags:
        - Challenges
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                challengeString:
                  type: string
                  description: The signed challenge serialized as plaintext JSON string. You receive this together with the signature from the identity that signed the challenge.
                  nullable: false
                signature:
                  type: string
                  description: The signature that will be used to validate the challenge.
                  nullable: false
              required:
                - challenge
                - signature
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    nullable: false
                    properties:
                      isValid:
                        type: boolean
                        nullable: false
                      challengeCreatedBy:
                        $ref: "#/components/schemas/Address"
                    required:
                      - isValid
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  # ------------------- Files -------------------

  /api/v2/Files:
    get:
      operationId: getAllFileMetadata
      description: Queries metadata of all files.
      tags:
        - Files
      parameters:
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: createdBy
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: createdByDevice
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: description
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: filename
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: filesize
          schema:
            $ref: "#/components/schemas/NumberFilter"
        - in: query
          name: mimetype
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: title
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: isOwn
          schema:
            $ref: "#/components/schemas/BooleanFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    nullable: false
                    items:
                      $ref: "#/components/schemas/FileMetadata"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Files/Own:
    post:
      operationId: uploadNewOwnFile
      description: Uploads a new own file with metadata.
      tags:
        - Files
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  nullable: false
                  description: A user-friendly title for the file which is shown on the UI.
                  example: Curriculum Vitae
                description:
                  type: string
                  nullable: false
                  description: A description for the file which is shown on the UI.
                  example: My curriculum vitae
                expiresAt:
                  type: string
                  format: date-time
                  description: A timestamp that describes when this file will expire.
                  example: 2025-01-01
                  nullable: false
                file:
                  type: string
                  format: binary
                  nullable: false
              required:
                - file
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/FileMetadata"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getOwnFiles
      description: Queries metadata of files owned by this Connector.
      tags:
        - Files
      parameters:
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: createdByDevice
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: description
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: filename
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: filesize
          schema:
            $ref: "#/components/schemas/NumberFilter"
        - in: query
          name: mimetype
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: title
          schema:
            $ref: "#/components/schemas/TextFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    nullable: false
                    items:
                      $ref: "#/components/schemas/FileMetadata"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Files/Peer:
    post:
      operationId: loadPeerFile
      description: Loads a file of another identity. After it is loaded once, you can retrieve it without the need for the truncatedReference by calling one of the GET-routes.
      tags:
        - Files
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reference:
                  type: string
                  format: byte
                  nullable: false
                  description: The base64 encoded truncated reference of the File, alternatively of a Token for the File. It consists of all information to get and decrypt it.
                password:
                  type: string
                  nullable: true
                  description: The password to load the File. Only required when loading with a password-protected Token.
              required:
                - reference
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/FileMetadata"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getPeerFiles
      description: Queries metadata of files you obtained from other identities.
      tags:
        - Files
      parameters:
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: createdBy
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: description
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: filename
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: filesize
          schema:
            $ref: "#/components/schemas/NumberFilter"
        - in: query
          name: mimetype
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: title
          schema:
            $ref: "#/components/schemas/TextFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    nullable: false
                    items:
                      $ref: "#/components/schemas/FileMetadata"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Files/{idOrReference}:
    get:
      operationId: getFileMetadata
      description: |
        Gets metadata for the file with the given `idOrReference` when the accept header is set to `application/json` or a QR Code containing the reference to the file if the accept header it set to `image/png`.

        `idOrReference` can either be a FileId (starting with `FIL`) or a FileReference (starting with `RklM`).
      tags:
        - Files
      parameters:
        - in: path
          name: idOrReference
          required: true
          schema:
            oneOf:
              - $ref: "#/components/schemas/FileID"
              - $ref: "#/components/schemas/FileReferenceTruncated"

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/FileMetadata"
                required:
                  - result
            image/png:
              schema:
                description: A QR Code that contains a reference to the file.
                type: string
                format: binary
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Files/{id}/Download:
    get:
      operationId: downloadFile
      description: Downloads the file with the given `id`.
      tags:
        - Files
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/FileID"

      responses:
        200:
          description: Success
          content:
            application/octet-stream:
              schema:
                description: File Content
                type: string
                format: binary
                example: binary
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Files/{id}/Token:
    post:
      operationId: createTokenForFile
      description: Creates a `Token` for the `File` with the given `id`. If the accept header is set to `image/png` instead of `application/json`, a QR Code containing the reference to the token is shown.
      tags:
        - Files
      parameters:
        - in: path
          name: id
          description: The ID of the `File`.
          required: true
          schema:
            $ref: "#/components/schemas/FileID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expiresAt:
                  description: The expiry of the token. Defaults to the expiry of the file.
                  type: string
                  format: date-time
                ephemeral:
                  description: If set to true the token will will not be cached in the database of the connector. Note that you will not be able to fetch this token unless you remember the truncatedReference of the token. Defaults to true. Will be ignored if the accept header is set to `image/png`.
                  type: boolean
                forIdentity:
                  $ref: "#/components/schemas/Address"
                  nullable: true
                  description: The only Identity that may load this Token.
                passwordProtection:
                  $ref: "#/components/schemas/PasswordProtection"
                  nullable: true
                  description: The password that will be required to load this Token and information about the password.
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Token"
                required:
                  - result
            image/png:
              schema:
                description: A QR Code that contains all necessary information about the token which itself contains a reference to the file.
                type: string
                format: binary
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  # ------------------- IdentityMetadata -------------------

  /api/v2/IdentityMetadata:
    put:
      operationId: upsertIdentityMetadata
      description: Creates or updates an IdentityMetadata object for the specified `reference` and `key` combination.
      tags:
        - IdentityMetadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/UpsertIdentityMetadataRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/IdentityMetadata"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

    get:
      operationId: getIdentityMetadata
      description: Fetches the IdentityMetadata with the given `reference` and `key` combination.
      tags:
        - IdentityMetadata
      parameters:
        - in: query
          name: reference
          description: The reference of the IdentityMetadata.
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - in: query
          name: key
          description: The optional key of the IdentityMetadata.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/IdentityMetadata"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

    delete:
      operationId: deleteIdentityMetadata
      description: Deletes the IdentityMetadata with the given `reference` and `key` combination.
      tags:
        - IdentityMetadata
      parameters:
        - in: query
          name: reference
          description: The reference of the IdentityMetadata.
          required: true
          schema:
            $ref: "#/components/schemas/Address"
        - in: query
          name: key
          description: The optional key of the IdentityMetadata.
          required: false
          schema:
            type: string
      responses:
        204:
          description: Success
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  # ------------------- Messages -------------------

  /api/v2/Messages:
    post:
      operationId: sendMessage
      description: >
        Sends a new message to the given recipient(s).
      tags:
        - Messages
      requestBody:
        content:
          application/json:
            schema:
              description: A message can theoretically consist of any content. But our end user apps can only interpret some specific content types.
              type: object
              properties:
                recipients:
                  type: array
                  description: Addresses of the recipients of this message.
                  nullable: false
                  items:
                    $ref: "#/components/schemas/Address"
                content:
                  anyOf:
                    - $ref: "#/components/schemas/Mail"
                    - $ref: "#/components/schemas/Request"
                    - $ref: "#/components/schemas/ResponseWrapper"
                    - $ref: "#/components/schemas/Notification"
                    - $ref: "#/components/schemas/ArbitraryMessageContent"
                  nullable: false
                  example:
                    "@type": Mail
                    to: [did:e:<base-url>:dids:<22-characters>]
                    cc: [did:e:<base-url>:dids:<22-characters>]
                    subject: Subject
                    body: Body
                  description: Either a Mail, a Request, a ResponseWrapper, a Notification or an ArbitraryMessageContent must be provided as the `content` of the Message.
                attachments:
                  type: array
                  nullable: true
                  items:
                    $ref: "#/components/schemas/FileID"
              required:
                - recipients
                - content
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Message"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getMessages
      description: Queries messages.
      tags:
        - Messages
      parameters:
        - in: query
          name: createdBy
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: createdByDevice
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: recipients.address
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: recipients.relationshipId
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: participant
          description: Either `createdBy` or one of the recipients should be equal to this ID.
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: attachments
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: content.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: content.subject
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: content.body
          schema:
            $ref: "#/components/schemas/TextFilter"

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    nullable: false
                    items:
                      $ref: "#/components/schemas/Message"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Messages/{id}:
    get:
      operationId: getMessage
      description: Fetches the message with the given `id`.
      tags:
        - Messages
      parameters:
        - in: path
          name: id
          description: The ID of the message.
          required: true
          schema:
            $ref: "#/components/schemas/MessageID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/MessageWithAttachments"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Messages/{messageId}/Attachments/{attachmentId}:
    get:
      operationId: getMetadataOfMessageAttachment
      description: Returns the attachment's metadata of the given `attachmentId` of message with `messageId`.
      tags:
        - Messages
      parameters:
        - in: path
          name: messageId
          description: The ID of the message.
          required: true
          schema:
            $ref: "#/components/schemas/MessageID"
        - in: path
          name: attachmentId
          description: The ID of the attachment.
          required: true
          schema:
            $ref: "#/components/schemas/FileID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/FileMetadata"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Messages/{messageId}/Attachments/{attachmentId}/Download:
    get:
      operationId: downloadAttachmentOfMessage
      description: Downloads the file of the given `attachmentId` of message with `messageId`.
      tags:
        - Messages
      parameters:
        - in: path
          name: messageId
          description: The ID of the message.
          required: true
          schema:
            $ref: "#/components/schemas/MessageID"
        - in: path
          name: attachmentId
          description: The ID of the attachment.
          required: true
          schema:
            $ref: "#/components/schemas/FileID"
      responses:
        200:
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  # ------------------- Relationships -------------------

  /api/v2/Relationships/CanCreate:
    put:
      operationId: canCreateRelationship
      description: Checks if a Relationship can be created with a given RelationshipTemplate to its creator. Optionally, the potential `creationContent` of the Relationship can also be validated.
      tags:
        - Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                templateId:
                  allOf:
                    - $ref: "#/components/schemas/RelationshipTemplateID"
                  nullable: false
                creationContent:
                  oneOf:
                    - $ref: "#/components/schemas/RelationshipCreationContent"
                    - $ref: "#/components/schemas/ArbitraryRelationshipCreationContent"
                  nullable: false
                  example:
                    "@type": "ArbitraryRelationshipCreationContent"
                    value:
                      prop1: value
                      prop2: 1
                  description: Either a RelationshipCreationContent or an ArbitraryRelationshipCreationContent must be provided as the `creationContent` of the Relationship.
              required:
                - templateId
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/CanCreateRelationshipResponse"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships:
    post:
      operationId: createRelationship
      description: Creates a `Relationship` to the creator of a given relationshipTemplateId. The `RelationshipTemplate` of the given `relationshipTemplateId` must come from another identity and must be loaded by `POST /RelationshipTemplates/Peer` first.
      tags:
        - Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                templateId:
                  allOf:
                    - $ref: "#/components/schemas/RelationshipTemplateID"
                  nullable: false
                creationContent:
                  oneOf:
                    - $ref: "#/components/schemas/RelationshipCreationContent"
                    - $ref: "#/components/schemas/ArbitraryRelationshipCreationContent"
                  nullable: false
                  example:
                    "@type": "ArbitraryRelationshipCreationContent"
                    value:
                      prop1: value
                      prop2: 1
                  description: Either a RelationshipCreationContent or an ArbitraryRelationshipCreationContent must be provided as the `creationContent` of the Relationship.
              required:
                - templateId
                - creationContent
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getRelationships
      description: Queries relationships.
      tags:
        - Relationships
      parameters:
        - in: query
          name: template.id
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: peer
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: status
          schema:
            $ref: "#/components/schemas/TextFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Relationships/{id}:
    get:
      operationId: getRelationshipById
      description: Fetches the `Relationship` with the given `id`.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    delete:
      operationId: decomposeRelationship
      description: Decompose a Relationship that has already been terminated. This action will remove the Relationship and all related data.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the terminated Relationship to decompose.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        204:
          description: Success
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships/{id}/Attributes:
    get:
      operationId: getAttributesForRelationship
      description: Queries attributes that are related to the given relationship.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/Attribute"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Relationships/{id}/Accept:
    put:
      operationId: acceptRelationship
      description: Accepts the pending Relationship.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships/{id}/Reject:
    put:
      operationId: rejectRelationship
      description: Rejects the pending Relationship.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships/{id}/Revoke:
    put:
      operationId: revokeRelationship
      description: Revoke the pending relationship. If the relationship was created by another identity the request will return with the error code 500.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships/{id}/Terminate:
    put:
      operationId: terminateRelationship
      description: Terminate the relationship.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship to terminate.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships/{id}/Reactivate:
    put:
      operationId: requestRelationshipReactivation
      description: Request the relationship reactivation.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship to request reactivation of.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships/{id}/Reactivate/Accept:
    put:
      operationId: acceptRelationshipReactivation
      description: Accept a relationship reactivation.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship to accept the reactivation of.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships/{id}/Reactivate/Reject:
    put:
      operationId: rejectRelationshipReactivation
      description: Reject a relationship reactivation.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship to reject the reactivation of.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Relationships/{id}/Reactivate/Revoke:
    put:
      operationId: revokeRelationshipReactivation
      description: Revoke a relationship reactivation.
      tags:
        - Relationships
      parameters:
        - in: path
          name: id
          description: The ID of the relationship to revoke the reactivation of.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Relationship"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  # ------------------- RelationshipTemplates -------------------

  /api/v2/RelationshipTemplates:
    get:
      operationId: getRelationshipTemplates
      description: Queries `RelationshipTemplates`.
      tags:
        - RelationshipTemplates
      parameters:
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: createdBy
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: createdByDevice
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: maxNumberOfAllocations
          schema:
            $ref: "#/components/schemas/NumberFilter"
        - in: query
          name: forIdentity
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: passwordProtection
          schema:
            $ref: "#/components/schemas/ExistenceFilter"
        - in: query
          name: passwordProtection.password
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: passwordProtection.passwordIsPin
          schema:
            $ref: "#/components/schemas/PartialBooleanFilter"
        - in: query
          name: isOwn
          schema:
            $ref: "#/components/schemas/BooleanFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/RelationshipTemplate"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/RelationshipTemplates/Own:
    post:
      operationId: createOwnRelationshipTemplate
      description: Creates a new `RelationshipTemplate`.
      tags:
        - RelationshipTemplates
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                maxNumberOfAllocations:
                  type: integer
                  format: int32
                  nullable: true
                  description: The maximum number identities that can allocate this template. Omitting this property leads to an infinite number of possible allocations.
                  example: 1
                expiresAt:
                  type: string
                  format: date-time
                  example: 2025-01-01
                  description: A timestamp that describes when this relationship template expires. Expired templates cannot be used to create relationships anymore.
                forIdentity:
                  $ref: "#/components/schemas/Address"
                  nullable: true
                  description: The only Identity that may load this RelationshipTemplate.
                passwordProtection:
                  $ref: "#/components/schemas/PasswordProtection"
                  nullable: true
                  description: The password that will be required to load this RelationshipTemplate and information about the password.
                content:
                  oneOf:
                    - $ref: "#/components/schemas/RelationshipTemplateContent"
                    - $ref: "#/components/schemas/ArbitraryRelationshipTemplateContent"
                  nullable: false
                  example:
                    "@type": "ArbitraryRelationshipTemplateContent"
                    value:
                      prop1: "value"
                      prop2: 1
                  description: Either a RelationshipTemplateContent or an ArbitraryRelationshipTemplateContent must be provided as the `content` of the RelationshipTemplate.
              required:
                - expiresAt
                - content
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/RelationshipTemplate"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getOwnRelationshipTemplates
      description: Queries own `RelationshipTemplates`.
      tags:
        - RelationshipTemplates
      parameters:
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: createdByDevice
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: maxNumberOfAllocations
          schema:
            $ref: "#/components/schemas/NumberFilter"
        - in: query
          name: forIdentity
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: passwordProtection
          schema:
            $ref: "#/components/schemas/ExistenceFilter"
        - in: query
          name: passwordProtection.password
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: passwordProtection.passwordIsPin
          schema:
            $ref: "#/components/schemas/PartialBooleanFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/RelationshipTemplate"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/RelationshipTemplates/Peer:
    post:
      operationId: loadPeerRelationshipTemplate
      description: Loads a `RelationshipTemplate` created by others. This is a prerequisite for using the template while creating a new `Relationship`.
      tags:
        - RelationshipTemplates
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reference:
                  type: string
                  format: byte
                  nullable: false
                  description: The base64 encoded truncated reference of the RelationshipTemplate, alternatively of a Token for the RelationshipTemplate. It consists of all information to get and decrypt it.
                password:
                  type: string
                  nullable: true
                  description: The password to load the RelationshipTemplate. Only required if the RelationshipTemplate resp. the Token for the RelationshipTemplate is password-protected.
              required:
                - reference
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/RelationshipTemplate"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getPeerRelationshipTemplates
      description: Queries `RelationshipTemplates` of other identities. The templates have to be loaded by calling `POST /RelationshipTemplates/Peer`.
      tags:
        - RelationshipTemplates
      parameters:
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: createdBy
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: maxNumberOfAllocations
          schema:
            $ref: "#/components/schemas/NumberFilter"
        - in: query
          name: forIdentity
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: passwordProtection
          schema:
            $ref: "#/components/schemas/ExistenceFilter"
        - in: query
          name: passwordProtection.password
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: passwordProtection.passwordIsPin
          schema:
            $ref: "#/components/schemas/PartialBooleanFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/RelationshipTemplate"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/RelationshipTemplates/{id}:
    get:
      operationId: getRelationshipTemplate
      description: Fetches the `RelationshipTemplate` with the given `id` when the accept header is set to `application/json` or a QR Code containing the reference to the RelationshipTemplate if the accept header it set to `image/png`.
      tags:
        - RelationshipTemplates
      parameters:
        - in: path
          name: id
          description: The ID of the relationship template.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipTemplateID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/RelationshipTemplate"
                required:
                  - result
            image/png:
              schema:
                description: A QR Code that contains a reference to the RelationshipTemplate.
                type: string
                format: binary
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/RelationshipTemplates/Own/{id}/Token:
    post:
      operationId: createTokenForTemplate
      description: Creates a `Token` for the own `RelationshipTemplate` with the given `id`. If the accept header is set to `image/png` instead of `application/json`, a QR Code containing the reference to the token is shown.
      tags:
        - RelationshipTemplates
      parameters:
        - in: path
          name: id
          description: The ID of the relationship template.
          required: true
          schema:
            $ref: "#/components/schemas/RelationshipTemplateID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expiresAt:
                  description: The expiry of the token. Defaults to the expiry of the relationship template.
                  type: string
                  format: date-time
                ephemeral:
                  description: If set to true the token will will not be cached in the database of the connector. Note that you will not be able to fetch this token unless you remember the truncatedReference of the token. Defaults to true. Will be ignored if the accept header is set to `image/png`.
                  type: boolean
                forIdentity:
                  $ref: "#/components/schemas/Address"
                  nullable: true
                  description: The only Identity that may load this Token. If forIdentity is set for the RelationshipTemplate, that Identity must also be given here.
                passwordProtection:
                  $ref: "#/components/schemas/PasswordProtection"
                  nullable: true
                  description: The password that will be required to load this Token and information about the password. If passwordProtection is set for the RelationshipTemplate, the same passwordProtection must also be given here.
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Token"
                required:
                  - result
            image/png:
              schema:
                description: A QR Code that contains all necessary information about the token which itself contains a reference to the relationship template.
                type: string
                format: binary
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  # ------------------- Requests -------------------

  /api/v2/Requests/Incoming:
    get:
      operationId: getIncomingRequests
      description: Queries incoming `Requests`.
      tags:
        - Requests
      parameters:
        - in: query
          name: id
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: peer
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: status
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: content.expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: content.items.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: content.items.items.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: source.type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: source.reference
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: response.createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: response.source.type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: response.source.reference
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: response.content.result
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: response.content.items.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: response.content.items.items.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/Request"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Requests/Incoming/{id}:
    get:
      operationId: getIncomingRequest
      description: Fetches the incoming `Request` with the given `id`.
      tags:
        - Requests
      parameters:
        - in: path
          name: id
          description: The ID of the Request.
          required: true
          schema:
            $ref: "#/components/schemas/RequestID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Request"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Requests/Incoming/{id}/CanAccept:
    put:
      operationId: canAcceptIncomingRequest
      description: Checks if the `Request` with the given `id` can be accepted.
      tags:
        - Requests
      parameters:
        - in: path
          name: id
          description: The ID of the Request.
          required: true
          schema:
            $ref: "#/components/schemas/RequestID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/DecideRequestRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/RequestValidationResult"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Requests/Incoming/{id}/Accept:
    put:
      operationId: acceptIncomingRequest
      description: Accepts the incoming `Request` with the given `id`.
      tags:
        - Requests
      parameters:
        - in: path
          name: id
          description: The ID of the Request.
          required: true
          schema:
            $ref: "#/components/schemas/RequestID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/DecideRequestRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Request"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Requests/Incoming/{id}/CanReject:
    put:
      operationId: canRejectIncomingRequest
      description: Checks if the `Request` with the given `id` can be rejected.
      tags:
        - Requests
      parameters:
        - in: path
          name: id
          description: The ID of the Request.
          required: true
          schema:
            $ref: "#/components/schemas/RequestID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/DecideRequestRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/RequestValidationResult"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Requests/Incoming/{id}/Reject:
    put:
      operationId: rejectIncomingRequest
      description: Rejects the incoming `Request` with the given `id`.
      tags:
        - Requests
      parameters:
        - in: path
          name: id
          description: The ID of the Request.
          required: true
          schema:
            $ref: "#/components/schemas/RequestID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/DecideRequestRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Request"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Requests/Outgoing:
    get:
      operationId: getOutgoingRequests
      description: Queries outgoing `Requests`.
      tags:
        - Requests
      parameters:
        - in: query
          name: id
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: peer
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: status
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: content.expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: content.items.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: content.items.items.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: source.type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: source.reference
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: response.createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: response.source.type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: response.source.reference
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: response.content.result
          schema:
            $ref: "#/components/schemas/BooleanFilter"
        - in: query
          name: response.content.items.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: response.content.items.items.@type
          schema:
            $ref: "#/components/schemas/TextFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/Request"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    post:
      operationId: createOutgoingRequest
      description: Creates a new outgoing `Request`.
      tags:
        - Requests
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/CreateOutgoingRequestRequest"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Request"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Requests/Outgoing/{id}:
    get:
      operationId: getOutgoingRequest
      description: Fetches the `Request` with the given `id`.
      tags:
        - Requests
      parameters:
        - in: path
          name: id
          description: The ID of the Request.
          required: true
          schema:
            $ref: "#/components/schemas/RequestID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Request"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /api/v2/Requests/Outgoing/Validate:
    post:
      operationId: validateOutgoingRequest
      description: Validates the given `OutgoingRequest` before creating it via POST `/api/v2/Requests/Outgoing`.
      tags:
        - Requests
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/CanCreateOutgoingRequestRequest"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/RequestValidationResult"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  # ------------------- Tokens -------------------

  /api/v2/Tokens/Own:
    post:
      operationId: createOwnToken
      description: Creates a new `Token` with the given content.
      tags:
        - Tokens
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  allOf:
                    - $ref: "#/components/schemas/TokenContent"
                  nullable: false
                  example:
                    prop1: value
                    prop2: 1
                expiresAt:
                  type: string
                  format: date-time
                  example: 2025-01-01
                  nullable: false
                  description: A timestamp that describes when this token expires. An expired token cannot be fetched from the platform anymore. However it will still be available for auditing purposes.
                ephemeral:
                  description: If set to true the token will will not be cached in the database of the connector. Note that you will not be able to fetch this token unless you remember the truncatedReference of the token. Defaults to false.
                  type: boolean
                  example: false
                forIdentity:
                  $ref: "#/components/schemas/Address"
                  nullable: true
                  description: The only Identity that may load this Token.
                passwordProtection:
                  $ref: "#/components/schemas/PasswordProtection"
                  nullable: true
                  description: The password that will be required to load this Token and information about the password.
              required:
                - content
                - expiresAt
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Token"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getOwnTokens
      description: Queries `Tokens`.
      tags:
        - Tokens
      parameters:
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: createdByDevice
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: forIdentity
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: passwordProtection
          schema:
            $ref: "#/components/schemas/ExistenceFilter"
        - in: query
          name: passwordProtection.password
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: passwordProtection.passwordIsPin
          schema:
            $ref: "#/components/schemas/PartialBooleanFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/Token"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Tokens/Peer:
    post:
      operationId: loadPeerToken
      description: Load a `Token` created by others.
      tags:
        - Tokens
      requestBody:
        content:
          application/json:
            schema:
              properties:
                reference:
                  type: string
                  format: byte
                  nullable: false
                  description: The base64 encoded truncated reference of the Token, which actually consists of all information to get and decrypt it.
                ephemeral:
                  description: If set to true the token will will not be cached in the database of the connector. Note that you will not be able to fetch this token unless you remember the truncatedReference of the token. Defaults to false.
                  type: boolean
                password:
                  type: string
                  nullable: true
                  description: The password to load the Token. Only required if the Token is password-protected.
              required:
                - reference
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Token"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: getPeerTokens
      description: Queries `Tokens`.
      tags:
        - Tokens
      parameters:
        - in: query
          name: createdAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: createdBy
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: expiresAt
          schema:
            $ref: "#/components/schemas/DateFilter"
        - in: query
          name: forIdentity
          schema:
            $ref: "#/components/schemas/IdFilter"
        - in: query
          name: passwordProtection
          schema:
            $ref: "#/components/schemas/ExistenceFilter"
        - in: query
          name: passwordProtection.password
          schema:
            $ref: "#/components/schemas/TextFilter"
        - in: query
          name: passwordProtection.passwordIsPin
          schema:
            $ref: "#/components/schemas/PartialBooleanFilter"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    type: array
                    items:
                      $ref: "#/components/schemas/Token"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

  /api/v2/Tokens/{id}:
    get:
      operationId: getToken
      description: Fetches the `Token` with the given `id`.
      tags:
        - Tokens
      parameters:
        - in: path
          name: id
          description: The ID of the token.
          required: true
          schema:
            $ref: "#/components/schemas/TokenID"
      responses:
        200:
          description: Success
          content:
            image/png:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
                properties:
                  result:
                    nullable: false
                    $ref: "#/components/schemas/Token"
                required:
                  - result
          headers:
            X-Response-Duration-ms:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
            X-Response-Time:
              schema:
                $ref: "#/components/schemas/HeaderContent_X-Response-Time"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:
    # ------------------- Filter -------------------

    TextFilter:
      type: string
      description: >
        <table class="query-examples">
          <tr>
            <th>Operation</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>equal</td>
            <td>?foo=bar</td>
          </tr>
          <tr>
            <td>not equal</td>
            <td>?foo=!bar</td>
          </tr>
          <tr>
            <td>
              exists (=> not undefined)*
              <br/>
            </td>
            <td>?foo=</td>
          </tr>
          <tr>
            <td>not exists (=> undefined)</td>
            <td>?foo=!</td>
          </tr>
          <tr>
            <td>starts with</td>
            <td>?foo=^bar</td>
          </tr>
          <tr>
            <td>ends with</td>
            <td>?foo=$bar</td>
          </tr>
          <tr>
            <td>matches regex</td>
            <td>?foo=~.+bar.+</td>
          </tr>
          <tr>
            <td>in*</td>
            <td>?foo=bar&foo=baz</td>
          </tr>
          <tr>
            <td>not in*</td>
            <td>?foo=!bar&foo=!baz</td>
          </tr>
        </table>
        <p>* Due to limitations of Swagger UI, this feature cannot be tested in Swagger UI. Use a REST Client instead (e.g. Postman).</p>

    IdFilter:
      type: string
      description: >
        <p>Filters for an ID. Basically a `TextFilter`, but with less useful operators</p>
        <p>The following operators are supported:</p>
        <table>
          <tr>
            <th>Operation</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>equal</td>
            <td>?foo=XXX_________________</td>
          </tr>
          <tr>
            <td>not equal</td>
            <td>?foo=!XXX_________________</td>
          </tr>
          <tr>
            <td>
              exists (=> not undefined)*
              <br/>
            </td>
            <td>?foo=</td>
          </tr>
          <tr>
            <td>not exists (=> undefined)</td>
            <td>?foo=!</td>
          </tr>
          <tr>
            <td>in*</td>
            <td>?foo=XXX_________________&foo=YYY_________________</td>
          </tr>
          <tr>
            <td>not in*</td>
            <td>?foo=!XXX_________________&foo=!YYY_________________</td>
          </tr>
        </table>
        <p>* Due to limitations of Swagger UI, this feature cannot be tested in Swagger UI. Use a REST Client instead (e.g. Postman).</p>

    DateFilter:
      type: string
      description: >
        <p>Filters for a date. In the background, a `DateFilter` compares dates based on their text value. Due to the order of ISO Date string characters though, this doesn't matter - as long as no timezones are used. We are looking for a better solution to this. For now you can convert your non-UTC dates to UTC before sending them in a query.</p>
        <p>The following operators are supported:</p>
        <table>
          <tr>
            <th>Operation</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>equal</td>
            <td>?foo=2020-01-01T00:00:00.000Z</td>
          </tr>
          <tr>
            <td>not equal</td>
            <td>?foo=!2020-01-01T00:00:00.000Z</td>
          </tr>
          <tr>
            <td>
              exists (=> not undefined)*
              <br/>
            </td>
            <td>?foo=</td>
          </tr>
          <tr>
            <td>not exists (=> undefined)</td>
            <td>?foo=!</td>
          </tr>
          <tr>
            <td>greater than</td>
            <td>?foo=>2020</td>
          </tr>
          <tr>
            <td>less than</td>
            <td>?foo=<2020</td>
          </tr>
          <tr>
            <td>greater than or equal to</td>
            <td>?foo=>=2020-01-01T00:00:00.000Z</td>
          </tr>
          <tr>
            <td>less than or equal to</td>
            <td>?foo=<=2020-01-01T00:00:00.000Z</td>
          </tr>
          <tr>
            <td>matches regex</td>
            <td>?foo=~.+01-01T.+</td>
          </tr>
          <tr>
            <td>in*</td>
            <td>?foo=2020-01-01T00:00:00.000Z&foo=2021-01-01T00:00:00.000Z</td>
          </tr>
          <tr>
            <td>not in*</td>
            <td>?foo=!2020-01-01T00:00:00.000Z&foo=!2021-01-01T00:00:00.000Z</td>
          </tr>
        </table>
        <p>* Due to limitations of Swagger UI, this feature cannot be tested in Swagger UI. Use a REST Client instead (e.g. Postman).</p>

    BooleanFilter:
      type: string
      description: >
        <p>Filters for a boolean.
        <p>The following operators are supported:</p>
        <table>
          <tr>
            <th>Operation</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>is true</td>
            <td>?foo=true</td>
          </tr>
          <tr>
            <td>is false</td>
            <td>?foo=!true</td>
          </tr>
        </table>
        <p>* Due to limitations of Swagger UI, this feature cannot be tested in Swagger UI. Use a REST Client instead (e.g. Postman).</p>

    PartialBooleanFilter:
      type: string
      description: >
        <p>Filters for a boolean that's either true or undefined.
        <p>The following operators are supported:</p>
        <table>
          <tr>
            <th>Operation</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>is true</td>
            <td>?foo=true</td>
          </tr>
          <tr>
            <td>is undefined</td>
            <td>?foo=!</td>
          </tr>
        </table>
        <p>* Due to limitations of Swagger UI, this feature cannot be tested in Swagger UI. Use a REST Client instead (e.g. Postman).</p>

    ExistenceFilter:
      type: string
      description: >
        <p>Filters for whether a property exists, i. e. is not undefined.
        <p>The following operators are supported:</p>
        <table>
          <tr>
            <th>Operation</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>exists</td>
            <td>?foo=</td>
          </tr>
          <tr>
            <td>doesn't exist</td>
            <td>?foo=!</td>
          </tr>
        </table>
        <p>* Due to limitations of Swagger UI, this feature cannot be tested in Swagger UI. Use a REST Client instead (e.g. Postman).</p>

    NumberFilter:
      type: string
      description: >
        <p>Filters for a number.
        <p>The following operators are supported:</p>
        <table>
          <tr>
            <th>Operation</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>equal</td>
            <td>?foo=bar</td>
          </tr>
          <tr>
            <td>not equal</td>
            <td>?foo=!bar</td>
          </tr>
          <tr>
            <td>
              exists (=> not undefined)*
              <br/>
            </td>
            <td>?foo=</td>
          </tr>
          <tr>
            <td>not exists (=> undefined)</td>
            <td>?foo=!</td>
          </tr>
          <tr>
            <td>greater than</td>
            <td>?foo=>5</td>
          </tr>
          <tr>
            <td>less than</td>
            <td>?foo=<5</td>
          </tr>
          <tr>
            <td>greater than or equal to</td>
            <td>?foo=>=5</td>
          </tr>
          <tr>
            <td>less than or equal to</td>
            <td>?foo=5</td>
          </tr>
          <tr>
            <td>in*</td>
            <td>?foo=5&foo=6</td>
          </tr>
          <tr>
            <td>not in*</td>
            <td>?foo=!5&foo=!6</td>
          </tr>
        </table>
        <p>* Due to limitations of Swagger UI, this feature cannot be tested in Swagger UI. Use a REST Client instead (e.g. Postman).</p>

    # ------------------- IDs -------------------

    Address:
      type: string
      format: Address
      minLength: 35
      example: did:e:<base-url>:dids:<22-characters>

    AttributeID:
      type: string
      format: AttributeID
      minLength: 20
      maxLength: 20
      example: ATT_________________
      description: The ID of an attribute.

    ChallengeID:
      type: string
      format: ChallengeID
      minLength: 20
      maxLength: 20
      example: CHL_________________

    DeviceID:
      type: string
      format: DeviceID
      minLength: 20
      maxLength: 20
      example: DVC_________________

    FileID:
      type: string
      format: FileID
      minLength: 20
      maxLength: 20
      example: FIL_________________
      description: The ID of a file.

    MessageID:
      type: string
      format: MessageID
      minLength: 20
      example: MSG_________________
      maxLength: 20
      description: The ID of a message.

    NotificationID:
      type: string
      format: NotificationID
      minLength: 20
      example: NOT_________________
      maxLength: 20
      description: The ID of a notification.

    RelationshipID:
      type: string
      format: RelationshipID
      minLength: 20
      maxLength: 20
      example: REL_________________
      description: The ID of a relationship.

    RelationshipTemplateID:
      type: string
      format: RelationshipTemplateID
      minLength: 20
      maxLength: 20
      example: RLT_________________
      description: The ID of a relationship template.

    TokenID:
      type: string
      format: TokenID
      minLength: 20
      maxLength: 20
      example: TOK_________________
      description: The ID of a message.

    RequestID:
      type: string
      format: RequestID
      minLength: 20
      maxLength: 20
      example: REQ_________________
      description: The ID of a message.

    # ------------------- Entities -------------------

    IdentityInfo:
      type: object
      properties:
        address:
          allOf:
            - $ref: "#/components/schemas/Address"
          description: The enmeshed address of the Connector.
          nullable: false
        publicKey:
          type: string
          description: The public key of the Connector used to digitally sign data.
          nullable: false
      required:
        - address
        - publicKey

    IdentityAttribute:
      type: object
      additionalProperties: false
      required:
        - "@type"
        - owner
        - value
      properties:
        "@type":
          type: string
        owner:
          type: string
          allOf:
            - $ref: "#/components/schemas/Address"
          description: The address of the identity that owns the attribute.
        tags:
          $ref: "#/components/schemas/IdentityAttributeContent_tags"
        validFrom:
          $ref: "#/components/schemas/AttributeContent_validFrom"
        validTo:
          $ref: "#/components/schemas/AttributeContent_validTo"
        value:
          "$ref": "#/components/schemas/AttributeValue"

    RelationshipAttribute:
      type: object
      additionalProperties: false
      properties:
        "@type":
          type: string
        confidentiality:
          $ref: "#/components/schemas/Confidentiality"
          type: string
          description: The confidentiality of the attribute.
        isTechnical:
          type: boolean
          description: Whether the attribute is technical or not.
        key:
          type: string
          description: The key of the attribute.
        owner:
          type: string
          allOf:
            - $ref: "#/components/schemas/Address"
          description: The address of the identity that owns the attribute.
        validFrom:
          $ref: "#/components/schemas/AttributeContent_validFrom"
        validTo:
          $ref: "#/components/schemas/AttributeContent_validTo"
        value:
          "$ref": "#/components/schemas/AttributeValue"
      required:
        - "@type"
        - confidentiality
        - key
        - owner
        - value

    AttributeContent_validFrom:
      type: string
      format: date-time
      description: The date and time when the attribute becomes valid.

    AttributeContent_validTo:
      type: string
      format: date-time
      description: The date and time when the attribute expires.

    IdentityAttributeContent_tags:
      type: array
      items:
        type: string
      description: The tags of the attribute.
      example: ["tag_1", "tag_2"]

    Confidentiality:
      enum:
        - public
        - protected
        - private
      type: string

    Attribute:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/AttributeID"
          nullable: false
          description: The ID of the attribute.
        createdAt:
          type: string
          format: date-time
          description: The date and time when the attribute was created.
        shareInfo:
          "$ref": "#/components/schemas/AttributeShareInfo"
        deletionInfo:
          "$ref": "#/components/schemas/AttributeDeletionInfo"
        succeededBy:
          type: string
          allOf:
            - $ref: "#/components/schemas/AttributeID"
          description: The ID of the attribute that was used to succeed this attribute.
        succeeds:
          type: string
          allOf:
            - $ref: "#/components/schemas/AttributeID"
          description: The ID of the attribute that this attribute succeeds.
        content:
          anyOf:
            - "$ref": "#/components/schemas/IdentityAttribute"
            - "$ref": "#/components/schemas/RelationshipAttribute"
        isDefault:
          type: boolean
      required:
        - id
        - createdAt
        - content

    AttributeShareInfo:
      type: object
      additionalProperties: false
      properties:
        peer:
          type: string
          allOf:
            - $ref: "#/components/schemas/Address"
          description: The address of the peer that received the attribute.
        requestReference:
          type: string
          allOf:
            - $ref: "#/components/schemas/RequestID"
          description: The ID of the request that was used to share the attribute.
        sourceAttribute:
          type: string
          allOf:
            - $ref: "#/components/schemas/AttributeID"
          description: The ID of the attribute that was copied for sharing.
      required:
        - requestReference
        - peer

    AttributeDeletionInfo:
      type: object
      additionalProperties: false
      properties:
        deletionStatus:
          type: string
          description: The status of the deletion process
        deletionDate:
          type: string
          description: The date of the deletion
      required:
        - deletionStatus
        - deletionDate

    AttributeValue:
      type: object
      additionalProperties: true
      properties:
        "@type":
          type: string
      required:
        - "@type"

    AttributeTagCollection:
      type: object
      additionalProperties: false
      properties:
        supportedLanguages:
          type: array
          items:
            type: string
          example: ["en", "de"]
        tagsForAttributeValueTypes:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              "$ref": "#/components/schemas/AttributeTag"
          example:
            PhoneNumber:
              emergency:
                displayNames: { de: "Notfallkontakt", en: "Emergency Contact" }
                children:
                  first: { displayNames: { de: "Erster Notfallkontakt", en: "First Emergency Contact" } }
                  second: { displayNames: { de: "Zweiter Notfallkontakt", en: "Second Emergency Contact" } }
              private: { displayNames: { de: "Privat", en: "Private" } }
      required:
        - supportedLanguages
        - tagsForAttributeValueTypes

    AttributeTag:
      type: object
      additionalProperties: false
      properties:
        children:
          additionalProperties:
            "$ref": "#/components/schemas/AttributeTag"
          type: object
        displayNames:
          additionalProperties:
            type: string
          type: object
      required:
        - displayNames

    CanCreateRepositoryAttributeResponse:
      type: object
      properties:
        isSuccess:
          type: boolean
      oneOf:
        - properties:
            isSuccess:
              const: true
          required:
            - isSuccess
          additionalProperties: false

        - properties:
            isSuccess:
              const: false
            code:
              type: string
            message:
              type: string
          required:
            - isSuccess
            - code
            - message
          additionalProperties: false

    ConnectorHealth:
      type: object
      properties:
        isHealthy:
          type: boolean
          nullable: false
        services:
          type: object
          nullable: false
          properties:
            database:
              type: string
              enum: [healthy, unhealthy]
            backbone:
              type: string
              enum: [healthy, unhealthy]
          required:
            - database
            - backbone
      required:
        - isHealthy
        - services

    ConnectorVersion:
      type: object
      properties:
        build:
          type: string
          example: 50
          description: The build number of the Connector Docker image.
        commit:
          type: string
          example: c459aa1b74a6b51d1230869ec8b199d4c7506679
          description: The commit that triggered the build of the Connector docker-image.
        version:
          type: string
          example: 1.0.0
          description: The Connector version.
        date:
          type: string
          format: date-time
          description: The time the Connector docker-image was built.
      required:
        - build
        - commit
        - version
        - date

    CreateDeviceChallengeRequest:
      type: object
      properties:
        challengeType:
          type: string
          enum: ["Device"]
      required:
        - challengeType

    CreateIdentityChallengeRequest:
      type: object
      properties:
        challengeType:
          type: string
          enum: ["Identity"]
      required:
        - challengeType

    CreateRelationshipChallengeRequest:
      type: object
      properties:
        challengeType:
          type: string
          enum: ["Relationship"]
        relationship:
          allOf:
            - $ref: "#/components/schemas/RelationshipID"
          description: The ID of the relationship to create a challenge for.
          nullable: false
      required:
        - challengeType
        - relationship

    FileMetadata:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/FileID"
          minLength: 20
          maxLength: 20
          description: The ID of the file.
          nullable: false
        title:
          type: string
          description: A user-friendly title for the file which is shown on the UI. If it is not passed, it will be set to the name of the file.
          example: Curriculum Vitae
          nullable: true
        description:
          type: string
          description: A description for the file which is shown on the UI.
          example: My curriculum vitae
          nullable: true
        filename:
          type: string
          description: The name of the file.
          example: CurriculumVitae.pdf
          nullable: false
        filesize:
          type: integer
          format: int64
          description: The size of the file in bytes.
          nullable: false
        createdAt:
          type: string
          format: date-time
          description: A timestamp that describes when this file was created.
          example: 2024-05-25T11:05:02.924Z
          nullable: false
        createdBy:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
        createdByDevice:
          allOf:
            - $ref: "#/components/schemas/DeviceID"
          nullable: false
        expiresAt:
          type: string
          format: date-time
          description: A timestamp that describes when this file will expire. Expired files cannot be accessed anymore. Notice that they will still be available for auditing purposes.
          example: 2026-05-25T11:05:02.924Z
          nullable: true
        mimetype:
          type: string
          example: application/pdf
          nullable: false
        isOwn:
          type: boolean
          nullable: false
        truncatedReference:
          type: string
          format: byte
          nullable: false
          description: The base64 encoded truncated reference of the File, which actually consists of all information to get and decrypt it.
      required:
        - id
        - title
        - filename
        - filesize
        - createdAt
        - createdBy
        - createdByDevice
        - expiresAt
        - mimetype
        - isOwn
        - truncatedReference

    FileReferenceTruncated:
      type: object
      properties:
        reference:
          type: string
          nullable: false
          description: The base64 encoded truncated reference of the File.
      required:
        - reference

    PasswordProtection:
      type: object
      properties:
        password:
          type: string
          nullable: false
          description: The password that the object is protected with.
        passwordIsPin:
          type: boolean
          enum: [true]
          nullable: true
          description: true if the password is a PIN, undefined otherwise. If it's a PIN, a numpad is displayed when entering the password in the app.
      required:
        - password

    Recipient:
      type: object
      description: Information about the recipient of a message.
      properties:
        address:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The address of this recipient.
        relationshipId:
          allOf:
            - $ref: "#/components/schemas/RelationshipID"
          nullable: true
          description: The id of the relationship to the recipient.
      required:
        - address

    RequestItem:
      type: object
      properties:
        "@type":
          type: string
        title:
          type: string
          description: Will be rendered as title of the request.
        description:
          type: string
          description: Will be rendered as description of the request.
        mustBeAccepted:
          type: boolean
          description: Whether the request must be accepted by the peer.
        metadata:
          type: object
          description: Metadata provided by the sender of the request.
      required:
        - "@type"
        - mustBeAccepted

    RequestItemGroup:
      type: object
      properties:
        "@type":
          type: string
        title:
          type: string
        description:
          type: string
        items:
          items:
            allOf:
              - $ref: "#/components/schemas/RequestItem"
          type: array
        metadata:
          type: object
      required:
        - "@type"
        - items

    RequestContent:
      type: object
      properties:
        "@type":
          type: string
          enum: ["Request"]
        expiresAt:
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/RequestID"
        items:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/RequestItem"
              - $ref: "#/components/schemas/RequestItemGroup"
      required:
        - items

    RequestResponseContentItem:
      properties:
        "@type":
          type: string
        result:
          type: string
          enum: [Accepted, Rejected, Failed]
      required:
        - "@type"
        - result

    RequestResponseContentItemGroup:
      properties:
        "@type":
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/RequestResponseContentItem"
      required:
        - "@type"
        - items

    RequestResponseContent:
      type: object
      properties:
        "@type":
          type: string
          enum: [Response]
        result:
          type: string
          enum: [Accepted, Rejected]
        requestId:
          allOf:
            - $ref: "#/components/schemas/RequestID"
        items:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/RequestResponseContentItem"
              - $ref: "#/components/schemas/RequestResponseContentItemGroup"
      required:
        - result
        - requestId
        - items

    Request:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/RequestID"
          nullable: false
        isOwn:
          type: boolean
          nullable: false
          description: Whether this request is owned by the current identity (`OutgoingRequest`) or not (`IncomingRequest`).
        peer:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The address of the peer that sent / received this request.
        createdAt:
          type: string
          format: date-time
          nullable: false
          description: A timestamp that describes when this request was created.
        status:
          type: string
          enum: ["Draft", "Open", "DecisionRequired", "ManualDecisionRequired", "Decided", "Completed"]
          nullable: false
          description: The status of this request.
        content:
          allOf:
            - $ref: "#/components/schemas/RequestContent"
          nullable: false
        source:
          type: object
          nullable: true
          description: The source of this request. Can be a `Message` or a `RelationshipTemplate`.
          properties:
            type:
              type: string
              enum: ["Message", "RelationshipTemplate"]
              nullable: false
              description: The type of the source of this request.
            reference:
              type: string
              nullable: false
              description: The id of the `Message` or the `RelationshipTemplate`.
          required:
            - type
            - reference
        response:
          type: object
          nullable: true
          properties:
            createdAt:
              type: string
              format: date-time
              nullable: false
              description: A timestamp that describes when this response was created.
            content:
              type: object
              allOf:
                - $ref: "#/components/schemas/RequestResponseContent"
              nullable: false
            source:
              type: object
              nullable: true
              description: The source of this response. Can be a `Message` or a `Relationship`.
              properties:
                type:
                  type: string
                  enum: ["Message", "Relationship"]
                  nullable: false
                  description: The type of the source of this response.
                reference:
                  type: string
                  nullable: false
                  description: The id of the `Message` or the `Relationship`.
              required:
                - type
                - reference
          required:
            - createdAt
            - content
      required:
        - id
        - isOwn
        - peer
        - createdAt
        - status
        - content

    DecideRequestRequestItem:
      oneOf:
        - type: object
          properties:
            accept:
              type: boolean
              enum: [true]
              nullable: false
          description: Accept the request item.
          required:
            - accept
        - type: object
          properties:
            accept:
              type: boolean
              enum: [false]
              nullable: false
            code:
              type: string
              nullable: true
            message:
              type: string
              nullable: true
          description: Reject the request item and add an optional code and message.
          required:
            - accept
      example: { "accept": true }

    DecideRequestRequestItemGroup:
      type: object
      properties:
        items:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DecideRequestRequestItem"

    DecideRequestRequest:
      type: object
      properties:
        items:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DecideRequestRequestItem"
              - $ref: "#/components/schemas/DecideRequestRequestItemGroup"
      example:
        {
          "items":
            [
              { "accept": true },
              { "accept": false, "code": "an.error.code", "message": "Error Message" },
              { "items": [{ "accept": "true" }, { "accept": false, "code": "an.error.code", "message": "Error Message" }] }
            ]
        }

    CanCreateOutgoingRequestRequest:
      type: object
      properties:
        content:
          type: object
          properties:
            expiresAt:
              type: string
              format: date-time
              nullable: true
            items:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/RequestItemGroup"
                  - $ref: "#/components/schemas/RequestItem"
                description: The `items` of a Request can be of type RequestItemGroup or RequestItem.
        peer:
          description: The address of the peer that will receive the request. This is optional because in case of a RelationshipTemplate you do not know the peer address yet. For better results you should specify `peer` whenever you know it.
          allOf:
            - $ref: "#/components/schemas/Address"
      required:
        - content

    CreateOutgoingRequestRequest:
      type: object
      properties:
        content:
          type: object
          properties:
            expiresAt:
              type: string
              format: date-time
              nullable: true
            items:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/RequestItemGroup"
                  - $ref: "#/components/schemas/RequestItem"
                description: The `items` of a Request can be of type RequestItemGroup or RequestItem.
        peer:
          allOf:
            - $ref: "#/components/schemas/Address"
      required:
        - content
        - peer

    CreateRepositoryAttributeResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/AttributeID"
          nullable: false
          description: The ID of the attribute.
        parentId:
          "$ref": "#/components/schemas/AttributeID"
        createdAt:
          type: string
          format: date-time
          description: The date and time when the attribute was created.
        shareInfo:
          "$ref": "#/components/schemas/AttributeShareInfo"
        succeededBy:
          type: string
          allOf:
            - $ref: "#/components/schemas/AttributeID"
          description: The ID of the attribute that was used to succeed this attribute.
        succeeds:
          type: string
          allOf:
            - $ref: "#/components/schemas/AttributeID"
          description: The ID of the attribute that this attribute succeeds.
        content:
          anyOf:
            - "$ref": "#/components/schemas/IdentityAttribute"
        isDefault:
          type: boolean
          enum: [true]
      required:
        - id
        - createdAt
        - content

    RequestValidationResult:
      type: object
      properties:
        isSuccess:
          type: boolean
          nullable: false
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        items:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/RequestValidationResult"
          example: [{ "isSuccess": true, "code": "string", "message": "string", "items": [] }]
      required:
        - isSuccess
        - items

    RequestMetadata:
      type: object
      additionalProperties: false
      properties:
        title:
          type: string
        description:
          type: string
        metadata:
          type: object
        expiresAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/MessageID"
          nullable: false
        createdBy:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The ID of the sender of this message.
        createdByDevice:
          allOf:
            - $ref: "#/components/schemas/DeviceID"
          nullable: false
          description: The ID of the device this message was sent with.
        createdAt:
          type: string
          format: date-time
          nullable: false
          description: A timestamp that describes when this message was received by the platform.
        recipients:
          type: array
          description: Information about the recipients of this message.
          items:
            $ref: "#/components/schemas/Recipient"
        content:
          anyOf:
            - $ref: "#/components/schemas/Mail"
            - $ref: "#/components/schemas/Request"
            - $ref: "#/components/schemas/ResponseWrapper"
            - $ref: "#/components/schemas/Notification"
            - $ref: "#/components/schemas/ArbitraryMessageContent"
          nullable: false
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/FileID"
        isOwn:
          type: boolean
          nullable: false
          description: Indicates if the message was sent by the current user.
      required:
        - id
        - createdBy
        - createdByDevice
        - createdAt
        - recipients
        - content
        - isOwn

    MessageWithAttachments:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/MessageID"
          nullable: false
        createdBy:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The ID of the sender of this message.
        createdByDevice:
          allOf:
            - $ref: "#/components/schemas/DeviceID"
          nullable: false
          description: The ID of the device this message was sent with.
        createdAt:
          type: string
          format: date-time
          nullable: false
          description: A timestamp that describes when this message was received by the platform.
        recipients:
          type: array
          description: Information about the recipients of this message.
          items:
            $ref: "#/components/schemas/Recipient"
        content:
          anyOf:
            - $ref: "#/components/schemas/Mail"
            - $ref: "#/components/schemas/Request"
            - $ref: "#/components/schemas/ResponseWrapper"
            - $ref: "#/components/schemas/Notification"
            - $ref: "#/components/schemas/ArbitraryMessageContent"
          nullable: false
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/FileMetadata"
        isOwn:
          type: boolean
          nullable: false
          description: Indicates if the message was sent by the current user.
      required:
        - id
        - createdBy
        - createdByDevice
        - createdAt
        - recipients
        - content
        - isOwn

    ResponseWrapper:
      type: object
      additionalProperties: false
      properties:
        "@type":
          type: string
          enum: ["ResponseWrapper"]
        requestId:
          $ref: "#/components/schemas/RequestID"
        requestSourceReference:
          anyOf:
            - $ref: "#/components/schemas/RelationshipTemplateID"
            - $ref: "#/components/schemas/MessageID"
        requestSourceType:
          type: string
          enum: ["RelationshipTemplate", "Message"]
        response:
          $ref: "#/components/schemas/RequestResponseContent"
      required:
        - "@type"
        - requestId
        - requestSourceReference
        - requestSourceType
        - response

    Mail:
      type: object
      additionalProperties: false
      properties:
        "@type":
          type: string
          enum: ["Mail"]
        to:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        cc:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        subject:
          type: string
        body:
          type: string
      required:
        - "@type"
        - to
        - subject
        - body

    ArbitraryMessageContent:
      type: object
      additionalProperties: false
      properties:
        "@type":
          type: string
          enum: ["ArbitraryMessageContent"]
        value:
          type: object
      required:
        - "@type"
        - value

    Notification:
      type: object
      additionalProperties: false
      required:
        - id
        - items
        - "@type"
      properties:
        "@type":
          type: string
          enum: ["Notification"]
        id:
          $ref: "#/components/schemas/NotificationID"
        items:
          type: array
          items:
            type: object

    CanCreateRelationshipResponse:
      type: object
      properties:
        isSuccess:
          type: boolean
      oneOf:
        - properties:
            isSuccess:
              const: true
          required:
            - isSuccess
          additionalProperties: false

        - properties:
            isSuccess:
              const: false
            code:
              type: string
            message:
              type: string
          required:
            - isSuccess
            - code
            - message
          additionalProperties: false

    Relationship:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/RelationshipID"
          nullable: false
          description: The ID of the relationship.
        template:
          allOf:
            - $ref: "#/components/schemas/RelationshipTemplate"
          nullable: false
        status:
          $ref: "#/components/schemas/RelationshipStatus"
        peer:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The address of the peer identity.
        peerIdentity:
          type: object
          additionalProperties: false
          properties:
            address:
              allOf:
                - $ref: "#/components/schemas/Address"
              nullable: false
            publicKey:
              type: string
              nullable: false
          required:
            - address
            - publicKey
        peerDeletionInfo:
          type: object
          additionalProperties: false
          properties:
            deletionStatus:
              type: string
              enum: ["ToBeDeleted", "Deleted"]
              description: The status of the deletion
            deletionDate:
              type: string
              description: The date of the deletion
          required:
            - deletionStatus
            - deletionDate
        creationContent:
          oneOf:
            - $ref: "#/components/schemas/RelationshipCreationContent"
            - $ref: "#/components/schemas/ArbitraryRelationshipCreationContent"
          nullable: false
          description: The content at creation.
        auditLog:
          type: array
          items:
            $ref: "#/components/schemas/RelationshipAuditLogEntry"
          nullable: false
          description: The audit log of the relationship.
      required:
        - id
        - template
        - status
        - peer
        - peerIdentity
        - creationContent
        - auditLog

    RelationshipCreationContent:
      type: object
      additionalProperties: false
      properties:
        "@type":
          type: string
          enum: ["RelationshipCreationContent"]
        response:
          $ref: "#/components/schemas/RequestResponseContent"
      required:
        - "@type"
        - response

    ArbitraryRelationshipCreationContent:
      type: object
      additionalProperties: false
      properties:
        "@type":
          type: string
          enum: ["ArbitraryRelationshipCreationContent"]
        value:
          type: object
      required:
        - "@type"
        - value

    RelationshipTemplateContent:
      type: object
      additionalProperties: false
      properties:
        "@type":
          type: string
          enum: ["RelationshipTemplateContent"]
        title:
          type: string
        metadata:
          type: object
        onNewRelationship:
          $ref: "#/components/schemas/RequestContent"
        onExistingRelationship:
          $ref: "#/components/schemas/RequestContent"
      required:
        - "@type"
        - onNewRelationship

    ArbitraryRelationshipTemplateContent:
      type: object
      additionalProperties: false
      properties:
        "@type":
          type: string
          enum: ["ArbitraryRelationshipTemplateContent"]
        value:
          type: object
      required:
        - "@type"
        - value

    RelationshipTemplate:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/RelationshipTemplateID"
          nullable: false
          readOnly: true
        maxNumberOfAllocations:
          type: integer
          format: int32
          nullable: true
          description: The maximum number identities that can allocate this template. Omitting this property leads to an infinite number of possible allocations.
        isOwn:
          type: boolean
          description: Describes whether the template was created by the connector (true) or whether it was loaded from another identity (false).
          nullable: false
        createdBy:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The address of the identity who created this template.
        createdByDevice:
          allOf:
            - $ref: "#/components/schemas/DeviceID"
          nullable: false
          description: The address of the identity who created this template.
        createdAt:
          type: string
          format: date-time
          nullable: false
          description: A timestamp that describes when this relationship template was created on the platform.
        expiresAt:
          type: string
          format: date-time
          description: A timestamp that describes when this relationship template expires. Expired templates cannot be used to create relationship requests anymore.
        forIdentity:
          $ref: "#/components/schemas/Address"
          nullable: true
          description: The only Identity that may load this RelationshipTemplate.
        passwordProtection:
          $ref: "#/components/schemas/PasswordProtection"
          nullable: true
          description: The password that is required to load this RelationshipTemplate and information about the password.
        content:
          oneOf:
            - $ref: "#/components/schemas/RelationshipTemplateContent"
            - $ref: "#/components/schemas/ArbitraryRelationshipTemplateContent"
          nullable: false
        truncatedReference:
          type: string
          format: byte
          nullable: false
          description: The base64 encoded truncated reference of the RelationshipTemplate, which actually consists of all information to get and decrypt it.
      required:
        - id
        - isOwn
        - createdBy
        - createdByDevice
        - createdAt
        - expiresAt
        - content
        - truncatedReference

    RelationshipAuditLogEntry:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          nullable: false
        createdBy:
          $ref: "#/components/schemas/Address"
        createdByDevice:
          $ref: "#/components/schemas/DeviceID"
        reason:
          $ref: "#/components/schemas/RelationshipAuditLogEntryReason"
        oldStatus:
          $ref: "#/components/schemas/RelationshipStatus"
        newStatus:
          $ref: "#/components/schemas/RelationshipStatus"
      required:
        - createdAt
        - createdBy
        - reason
        - newStatus

    RelationshipAuditLogEntryReason:
      type: string
      enum:
        - Creation
        - AcceptanceOfCreation
        - RejectionOfCreation
        - RevocationOfCreation
        - Termination
        - ReactivationRequested
        - AcceptanceOfReactivation
        - RejectionOfReactivation
        - RevocationOfReactivation
        - Decomposition
        - DecompositionDueToIdentityDeletion

    RelationshipStatus:
      type: string
      enum:
        - Pending
        - Active
        - Rejected
        - Revoked
        - Terminated
        - DeletionProposed

    SignedChallenge:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/ChallengeID"
          nullable: false
          description: The ID of the challenge.
        expiresAt:
          type: string
          format: date-time
          nullable: false
          description: The timestamp when the challenge expires.
        createdBy:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The Address of the identity who created the challenge.
        createdByDevice:
          allOf:
            - $ref: "#/components/schemas/DeviceID"
          nullable: false
          description: The DeviceID of the identity who created the challenge.
        type:
          type: string
          enum: [Challenge, Device, Relationship]
          nullable: false
          description: The type of the challenge.
        signature:
          type: string
          nullable: false
          description: The signature of the challenge.
        challengeString:
          type: string
          nullable: false
          description: The challenge serialized as a string that was used to sign the challenge.
      required:
        - id
        - expiresAt
        - createdBy
        - createdByDevice
        - type
        - signature
        - challengeString

    Token:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/TokenID"
          nullable: false
        createdBy:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The ID of the identity who created this token.
        createdByDevice:
          allOf:
            - $ref: "#/components/schemas/DeviceID"
          nullable: false
          description: The ID of the device which created this token.
        content:
          allOf:
            - $ref: "#/components/schemas/TokenContent"
          nullable: false
        createdAt:
          type: string
          format: date-time
          nullable: false
          description: A timestamp that describes when this token was created on the platform.
        expiresAt:
          type: string
          format: date-time
          nullable: false
          description: A timestamp that describes when this token expires. An expired token cannot be fetched from the platform anymore. However it will still be available for auditing purposes.
        forIdentity:
          $ref: "#/components/schemas/Address"
          nullable: true
          description: The only Identity that may load this Token.
        passwordProtection:
          $ref: "#/components/schemas/PasswordProtection"
          nullable: true
          description: The password that is required to load this Token and information about the password.
        truncatedReference:
          type: string
          format: byte
          nullable: false
          description: The base64 encoded truncated reference of the Token, which actually consists of all information to get and decrypt it.
      required:
        - id
        - createdBy
        - createdByDevice
        - content
        - createdAt
        - expiresAt
        - truncatedReference

    TokenContent:
      type: object
      description: The arbitrary JSON object which should be shared between creator of the Token and the recipient.

    IdentityMetadata:
      type: object
      additionalProperties: false
      properties:
        reference:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
          description: The address of the identity for that the metadata is stored for.
        key:
          type: string
          nullable: true
          description: An optional key to identify the metadata. Can be used to store multiple metadata entries for the same identity. There can be at most one IdentityMetadata per `reference` and `key` combination.
        value:
          type: object
          example: { "key": "value" }
          description: The metadata value as a JSON object.
      required:
        - reference
        - value

    UpsertIdentityMetadataRequest:
      type: object
      properties:
        reference:
          allOf:
            - $ref: "#/components/schemas/Address"
          nullable: false
        key:
          type: string
          nullable: true
        value:
          type: object
          nullable: false
          example: { "key": "value" }
      required:
        - reference
        - value

    # ------------------- General -------------------

    ErrorContent:
      type: object
      properties:
        error:
          type: object
          properties:
            id:
              description: A unique ID for the error instance.
              type: string
            code:
              description: >
                The error code.

                There are some generic error codes like:
                  - error.connector.recordNotFound
                  - error.connector.unauthorized
                  - error.connector.forbidden
                  - error.connector.validation.missingProperty
                  - error.connector.validation.invalidPropertyValueLength
                  - error.connector.validation.invalidPropertyValue

                Further there are route specific error codes.
              type: string
            message:
              description: An error message having more details about what went wrong. This message is not localized.
              type: string
            docs:
              description: A link to additional documentation about the error.
              type: string
            time:
              description: A timestamp that describes when the error occured.
              type: string
          required:
            - id
            - code
            - message
            - docs
            - time
      required:
        - error

    HeaderContent_X-Response-Duration-ms:
      description: The time in milliseconds the request took to be processed by the platform.
      type: number

    HeaderContent_X-Response-Time:
      description: A timestamp that describes when the response was sent to the client.
      type: string
      format: number

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorContent"
      headers:
        X-Response-Duration-ms:
          schema:
            $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
        X-Response-Time:
          schema:
            $ref: "#/components/schemas/HeaderContent_X-Response-Time"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorContent"
      headers:
        X-Response-Duration-ms:
          schema:
            $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
        X-Response-Time:
          schema:
            $ref: "#/components/schemas/HeaderContent_X-Response-Time"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorContent"
      headers:
        X-Response-Duration-ms:
          schema:
            $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
        X-Response-Time:
          schema:
            $ref: "#/components/schemas/HeaderContent_X-Response-Time"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorContent"
      headers:
        X-Response-Duration-ms:
          schema:
            $ref: "#/components/schemas/HeaderContent_X-Response-Duration-ms"
        X-Response-Time:
          schema:
            $ref: "#/components/schemas/HeaderContent_X-Response-Time"
