# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

# RSpec.describe CartsController, type: :controller do
#   # before { allow_any_instance_of(CanCan::ControllerResource).to receive(:load_and_authorize_resource).and_return(nil) }
#   # This should return the minimal set of attributes required to create a valid
#   # Cart. As you add validations to Cart, be sure to
#   # adjust the attributes here as well.

#   let(:user) { FactoryBot.create(:user) }

#   let(:valid_attributes) do
#     {user: user}
#   end

#   let(:invalid_attributes) do
#   end

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # CartsController. Be sure to keep this updated too.
#   let(:valid_session) do
#     {user_id: user.id}
#   end
#   let(:cart) { create(:cart, valid_attributes) }

#   # describe 'GET #index' do
#   #   it 'assigns all carts as @carts' do
#   #     get :index, params: {}, session: valid_session
#   #     expect(assigns(:carts)).to eq([cart])
#   #   end
#   # end

#   # describe 'GET #show' do
#   #   it 'assigns the requested cart as @cart' do
#   #     get :show, params: {id: cart.to_param}, session: valid_session
#   #     expect(assigns(:cart)).to eq(cart)
#   #   end
#   # end

#   # describe 'GET #new' do
#   #   it 'assigns a new cart as @cart' do
#   #     get :new, params: {}, session: valid_session
#   #     expect(assigns(:cart)).to be_a_new(Cart)
#   #   end
#   # end

#   # describe 'GET #edit' do
#   #   it 'assigns the requested cart as @cart' do
#   #     get :edit, params: {id: cart.to_param}, session: valid_session
#   #     expect(assigns(:cart)).to eq(cart)
#   #   end
#   # end

#   # describe 'POST #create' do
#   #   context 'with valid params' do
#   #     it 'creates a new Cart' do
#   #       expect do
#   #         post :create, params: {cart: valid_attributes}, session: valid_session
#   #       end.to change(Cart, :count).by(1)
#   #     end

#   #     it 'assigns a newly created cart as @cart' do
#   #       post :create, params: {cart: valid_attributes}, session: valid_session
#   #       expect(assigns(:cart)).to be_a(Cart)
#   #       expect(assigns(:cart)).to be_persisted
#   #     end

#   #     it 'redirects to the created cart' do
#   #       post :create, params: {cart: valid_attributes}, session: valid_session
#   #       expect(response).to redirect_to(Cart.last)
#   #     end
#   #   end

#   #   context 'with invalid params' do
#   #     it 'assigns a newly created but unsaved cart as @cart' do
#   #       post :create, params: {cart: invalid_attributes}
#   #       expect(assigns(:cart)).to be_a_new(Cart)
#   #     end

#   #     it "re-renders the 'new' template" do
#   #       post :create, params: {cart: invalid_attributes}
#   #       expect(response).to render_template('new')
#   #     end
#   #   end
#   # end

#   # describe 'PUT #update' do
#   #   context 'with valid params' do
#   #     let(:new_attributes) do
#   #       skip('Add a hash of attributes valid for your model')
#   #     end

#   #     it 'updates the requested cart' do
#   #       put :update, params: {id: cart.to_param, cart: new_attributes}, session: valid_session
#   #       cart.reload
#   #       skip('Add assertions for updated state')
#   #     end

#   #     it 'assigns the requested cart as @cart' do
#   #       put :update, params: {id: cart.to_param, cart: valid_attributes}, session: valid_session
#   #       expect(assigns(:cart)).to eq(cart)
#   #     end

#   #     it 'redirects to the cart' do
#   #       put :update, params: {id: cart.to_param, cart: valid_attributes}, session: valid_session
#   #       expect(response).to have_http_status(:success)
#   #     end
#   #   end

#   #   context 'with invalid params' do
#   #     it 'assigns the cart as @cart' do
#   #       put :update, params: {id: cart.to_param, cart: invalid_attributes}
#   #       expect(assigns(:cart)).to eq(cart)
#   #     end

#   #     it "re-renders the 'edit' template" do
#   #       put :update, params: {id: cart.to_param, cart: invalid_attributes}
#   #       expect(response).to render_template('edit')
#   #     end
#   #   end
#   # end

#   # describe 'DELETE #destroy' do
#   #   it 'destroys the requested cart' do
#   #     expect do
#   #       delete :destroy, params: {id: cart.to_param}, session: valid_session
#   #     end.to change(Cart, :count).by(-1)
#   #   end

#   #   it 'redirects to the carts list' do
#   #     delete :destroy, params: {id: cart.to_param}, session: valid_session
#   #     expect(response).to redirect_to(carts_url)
#   #   end
#   # end
# end
