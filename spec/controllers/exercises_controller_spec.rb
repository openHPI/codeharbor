# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ExercisesController, type: :controller do
  let(:user) { create(:user) }
  let(:cart) { create(:cart, user: user, exercises: []) }
  let(:collection) { create(:collection, users: [user], exercises: []) }
  # This should return the minimal set of attributes required to create a valid
  # Exercise. As you add validations to Exercise, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryBot.attributes_for(:only_meta_data, user: user).merge(
      descriptions_attributes: {'0' => FactoryBot.attributes_for(:simple_description)}
    )
  end

  let(:invalid_attributes) do
    {title: ''}
  end

  # Duplicate Exercise

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ExercisesController. Be sure to keep this updated too.
  let(:valid_session) do
    {user_id: user.id}
  end

  describe 'GET #index (My Exercises)' do
    subject(:get_request) { get :index, params: params, session: valid_session }

    let(:get_request_without_params) { get :index, params: {}, session: valid_session }
    let!(:exercise) { create(:simple_exercise, valid_attributes) }
    let(:params) { {} }

    it 'shows all Exercises of that user' do
      get_request
      expect(assigns(:exercises)).to contain_exactly exercise
    end

    context 'when user has multiple exercises' do
      before { create(:simple_exercise, valid_attributes) }

      it 'shows all Exercises of that user' do
        get_request
        expect(assigns(:exercises).size).to eq 2
      end

      context 'when a filter is used' do
        let(:params) { {search: 'filter'} }
        let!(:exercise) { create(:simple_exercise, user: user, title: 'filter me') }

        it 'shows the matching Exercise' do
          get_request
          expect(assigns(:exercises)).to contain_exactly exercise
        end

        context 'when a second request without searchparams is made' do
          it 'shows the matching Exercise' do
            get_request
            get_request_without_params
            expect(assigns(:exercises)).to contain_exactly exercise
          end
        end
      end
    end
  end

  describe 'GET #show' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'assigns the requested exercise as @exercise' do
      get :show, params: {id: exercise.to_param}, session: valid_session
      expect(assigns(:exercise)).to eq(exercise)
    end
  end

  describe 'GET #new' do
    it 'assigns a new exercise as @exercise' do
      get :new, params: {}, session: valid_session
      expect(assigns(:exercise)).to be_a_new(Exercise)
    end
  end

  describe 'GET #edit' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'assigns the requested exercise as @exercise' do
      get :edit, params: {id: exercise.to_param}, session: valid_session
      expect(assigns(:exercise)).to eq(exercise)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Exercise' do
        expect do
          post :create, params: {exercise: valid_attributes}, session: valid_session
        end.to change(Exercise, :count).by(1)
      end

      it 'assigns a newly created exercise as @exercise' do
        post :create, params: {exercise: valid_attributes}, session: valid_session
        expect(assigns(:exercise)).to be_persisted
      end

      it 'redirects to the created exercise' do
        post :create, params: {exercise: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Exercise.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved exercise as @exercise' do
        post :create, params: {exercise: invalid_attributes}, session: valid_session
        expect(assigns(:exercise)).to be_a_new(Exercise)
      end

      it "re-renders the 'new' template" do
        post :create, params: {exercise: invalid_attributes}, session: valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    context 'with valid params' do
      let(:new_attributes) { {title: 'new_title'} }

      it 'updates the requested exercise' do
        put :update, params: {id: exercise.to_param, exercise: new_attributes}, session: valid_session
        exercise.reload
        expect(exercise.title).to eq 'new_title'
      end

      it 'assigns the requested exercise as @exercise' do
        put :update, params: {id: exercise.to_param, exercise: valid_attributes}, session: valid_session
        expect(assigns(:exercise)).to eq(exercise)
      end

      it 'redirects to the exercise' do
        put :update, params: {id: exercise.to_param, exercise: valid_attributes}, session: valid_session
        expect(response).to redirect_to(exercise)
      end
    end

    context 'with invalid params' do
      it 'assigns the exercise as @exercise' do
        put :update, params: {id: exercise.to_param, exercise: invalid_attributes}, session: valid_session
        expect(assigns(:exercise)).to eq(exercise)
      end

      it "re-renders the 'edit' template" do
        put :update, params: {id: exercise.to_param, exercise: invalid_attributes}, session: valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'destroys the requested exercise' do
      expect do
        delete :destroy, params: {id: exercise.to_param}, session: valid_session
      end.to change(Exercise, :count).by(-1)
    end

    it 'redirects to the exercises list' do
      delete :destroy, params: {id: exercise.to_param}, session: valid_session
      expect(response).to redirect_to(exercises_url)
    end
  end

  describe 'GET #exercises_all' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'assigns all exercises as @exercises' do
      get :exercises_all, params: {}, session: valid_session
      expect(assigns(:exercises)).to eq([exercise])
    end
  end

  describe 'POST #add_to_cart' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'adds exercise to cart' do
      expect do
        post :add_to_cart, params: {id: exercise.to_param}, session: valid_session
      end.to change(cart.exercises, :count).by(+1)
    end
  end

  describe 'POST #add_to_collection' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'adds exercise to collection' do
      expect do
        post :add_to_collection, params: {id: exercise.to_param, collection: collection.id}, session: valid_session
      end.to change(collection.exercises, :count).by(+1)
    end
  end
end
