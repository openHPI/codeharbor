.header
  .row.pb-2.border-bottom
    .col-md-12.d-flex.justify-content-between.align-items-center
      .std-heading data-bs-toggle='tooltip' data-bs-placement='bottom' title=@task.title
        i.i.fa-regular.fa-file-lines
        =< truncate(@task.title, length: 100)
      span.task-star-rating
        - [*1..5].each do |i|
          - if @task.average_rating >= i
            span.fa-solid.fa-star.overall-rating data-rating=i
          - elsif (@task.average_rating + 0.5) >= i
            span.fa-regular.fa-star-half-stroke.overall-rating data-rating=i
          - else
            span.fa-regular.fa-star.overall-rating data-rating=i
        span
          .rating-dropdown
            - if current_user && policy(Rating).new?
              .btn#rate
                => t('.button.rate')
                span.fa-solid.fa-caret-down

              .popup-rating.shadow-sm.bg-light
                .rating data-task-id=@task.id
                  - if @user_rating
                    - [*1..5].each do |i|
                      - if @user_rating >= i
                        span.fa-solid.fa-star data-rating=i
                      - else
                        span.fa-regular.fa-star data-rating=i
                  - else
                    - [*1..5].each do |i|
                      span.fa-regular.fa-star data-rating=i

            - else
              div[data-bs-toggle='tooltip' title=t('.guest.disabled.tooltip') data-bs-delay=150]
                .btn#rate
                  => t('.button.rate')
                  span.fa-solid.fa-caret-down

      /= render 'remove_state_tag', exercise: @task
.row
  .col-md-12.my-3
    legend.toggle-next
      span.number = '1'
      => t('tasks.shared.basic_information')
      span.fa-solid.fa-caret-up
    .show-table.exercise-show
      .row
        .col-auto.row-label
          = Task.human_attribute_name('title')
          | :
        .col.row-value data-bs-toggle='tooltip' data-bs-placement='bottom' title=@task.title
          = truncate(@task.title, length: 120)

      .row
        .col-auto.row-label
          = Task.human_attribute_name('programming_language')
          | :
        .col.row-value
          = @task.programming_language&.language_with_version || t('common.none')
      .row.vertical
        .col.row-label
          = Task.human_attribute_name('description')
          | :
        .row-value
          = render_markdown(@task.description)


    legend.toggle-next.closed
      span.number = '2'
      => t('tasks.shared.additional_info')
      span.fa-solid.fa-caret-down
    .show-table.exercise-show style="display:none;"
      .row.vertical
        .col.row-label
          = Task.human_attribute_name('internal_description')
          | :
        .row-value
          = @task.internal_description

      = render 'dachsfisch_json_as_xml', dachsfisch_attribute: @task.meta_data, name: 'meta_data'
      = render 'dachsfisch_json_as_xml', dachsfisch_attribute: @task.submission_restrictions, name: 'submission_restrictions'
      = render 'dachsfisch_json_as_xml', dachsfisch_attribute: @task.external_resources, name: 'external_resources'
      = render 'dachsfisch_json_as_xml', dachsfisch_attribute: @task.grading_hints, name: 'grading_hints'
      .row
        .col-auto.row-label
          = t('common.created_at')
          | :
        .col.row-value
          = @task.created_at
      .row
        .col-auto.row-label
          = t('common.created_by')
          | :
        .col.row-value
          - if !@task.user
            = t('.undefined')
          - elsif @task.user == current_user
            = t('.yourself')
          - elsif @task.user.first_name.nil?
            = "User#{@task.user.id}"
          - elsif current_user && policy(@task.user).show?
            = link_to @task.user.name, user_path(@task.user)
          - else
            = @task.user.name
      .row
        .col-auto.row-label
          = Task.human_attribute_name('uuid')
        .col.row-value
          = @task.uuid
      .row
        .col-auto.row-label
          = Task.human_attribute_name('parent_uuid')
        .col.row-value
          = @task.parent_uuid
      .row
        .col-auto.row-label
          = Task.human_attribute_name('language')
        .col.row-value
          = @task.language
      .row
        .col-auto.row-label
          = Task.human_attribute_name('access_level')
          | :
        .col.row-value
          = t("tasks.visibility.#{@task.access_level}")
      .row
        .col-auto.row-label
          = Label.model_name.human(count: :many)
          | :
        .col.row-value
          - @task.labels.each do |label|
            .task_label style="background-color: #{"##{label.color}"}; color: #{"##{label.font_color}"};"
              = label.name
      .row
        .col-auto.row-label
          = Group.model_name.human(count: :many)
          | :
        .col.row-value
          - @task.groups.each_with_index do |group, index|
            - if index.positive?
              = ', '
            - if current_user && policy(group).show?
              = link_to group.name, group_path(group)
            - else
              = group.name
      .row
        .col-auto.row-label
          = Task.human_attribute_name('license')
          | :
        .col.row-value
          - if @task.license
            = @task.license.name
            = ': '
            = link_to @task.license.link, @task.license.link
          - else
            = t('.no_license')

    legend.toggle-next
      span.number = '3'
      => Task.human_attribute_name('files')
      span.fa-solid.fa-caret-up
    - if @files.empty?
      p style="margin-left: 10px; margin-bottom: 30px"
        = t('tasks.show.no_files')
    .files
      - @files.each do |file|
        .show-table.exercise-show
          .table-header.closed.toggle-next
            => file.full_file_name
            span.fa-solid.fa-caret-down
          .file-content
            .row
              .col-auto.row-label
                = TaskFile.human_attribute_name('name')
                | :
              .col.row-value
                = file.name
            .row
              .col-auto.row-label
                = TaskFile.human_attribute_name('path')
                | :
              .col.row-value
                = file.path
            .row
              .col-auto.row-label
                = TaskFile.human_attribute_name('internal_description')
                | :
              .col.row-value
                = file.internal_description
            .row
              .col-auto.row-label
                = TaskFile.human_attribute_name('xml_id')
                | :
              .col.row-value
                = file.xml_id

            - if file.attachment.blank?
              .row
                .editor.readonly data-file-name=file.name
                  = file.content
            - else
              .row.vertical
                .col.row-label
                  = TaskFile.human_attribute_name('attachment')
                  | :
                .row-value
                  - if file.attachment.image?
                    = image_tag(file.attachment.variant(resize_to_limit: [900, 900]))
                  - else
                    = link_to file.attachment.filename, download_attachment_task_file_path(file), 'data-turbolinks': false
            .row
              .col-auto.row-label
                = TaskFile.human_attribute_name('used_by_grader')
                | :
              .col.row-value
                = file.used_by_grader
            .row
              .col-auto.row-label
                = TaskFile.human_attribute_name('visible')
                | :
              .col.row-value
                = file.visible
            .row
              .col-auto.row-label
                = TaskFile.human_attribute_name('usage_by_lms')
                | :
              .col.row-value
                = file.usage_by_lms

    legend.toggle-next
      span.number = '4'
      => Task.human_attribute_name('tests')
      span.fa-solid.fa-caret-up
    - if @tests.empty?
      p style="margin-left: 10px; margin-bottom: 30px"
        = t('tasks.show.no_tests')
    .tests
      - @tests.each do |test|
        .show-table.exercise-show
          .table-header.closed.toggle-next
            => test.title
            span.fa-solid.fa-caret-down
          .test-content
            .row
              .col-auto.row-label
                = Test.human_attribute_name('title')
                | :
              .col.row-value
                = test.title
            .row
              .col-auto.row-label
                = Test.human_attribute_name('testing_framework')
                | :
              .col.row-value
                = test.testing_framework&.name_with_version || t('common.none')
            .row
              .col-auto.row-label
                = Test.human_attribute_name('description')
                | :
              .col.row-value
                = test.description
            .row
              .col-auto.row-label
                = Test.human_attribute_name('internal_description')
                | :
              .col.row-value
                = test.internal_description

            = render 'dachsfisch_json_as_xml', dachsfisch_attribute: test.meta_data, name: 'meta_data'
            - if test.configuration.present?
              .row.vertical
                .row-label
                  = Test.human_attribute_name('configuration')
                  | :
                .row-value
                  pre
                    = test.configuration_as_xml
            .row
              .col-auto.row-label
                = Test.human_attribute_name('test_type')
                | :
              .col.row-value
                = test.test_type
            .row
              .col-auto.row-label
                = Test.human_attribute_name('xml_id')
                | :
              .col.row-value
                = test.xml_id
            .row
              .col-auto.row-label
                = Test.human_attribute_name('validity')
                | :
              .col.row-value
                = test.validity
            .row
              .col-auto.row-label
                = Test.human_attribute_name('timeout')
                | :
              .col.row-value
                = test.timeout

            .files-header.my-1
              strong
                = label nil, "#{Task.human_attribute_name('files')}:"
            .files
              - test.files.each do |file|
                .show-table.exercise-show
                  .table-header.closed.toggle-next
                    => file.full_file_name
                    span.fa-solid.fa-caret-down
                  .file-content
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('name')
                        | :
                      .col.row-value
                        = file.name
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('path')
                        | :
                      .col.row-value
                        = file.path
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('internal_description')
                        | :
                      .col.row-value
                        = file.internal_description
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('xml_id')
                        | :
                      .col.row-value
                        = file.xml_id
                    - if file.attachment.blank?
                      .row
                        .editor.readonly data-file-name=file.name
                          = file.content
                    - else
                      .row.vertical
                        .col.row-label
                          = TaskFile.human_attribute_name('attachment')
                          | :
                        .row-value
                          - if file.attachment.image?
                            = image_tag(file.attachment.variant(resize_to_limit: [900, 900]))
                          - else
                            = link_to file.attachment.filename, download_attachment_task_file_path(file), 'data-turbolinks': false
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('used_by_grader')
                        | :
                      .col.row-value
                        = file.used_by_grader
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('visible')
                        | :
                      .col.row-value
                        = file.visible
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('usage_by_lms')
                        | :
                      .col.row-value
                        = file.usage_by_lms

    legend.toggle-next
      span.number = '5'
      => ModelSolution.model_name.human(count: :many)
      span.fa-solid.fa-caret-up
    - if @model_solutions.empty?
      p style="margin-left: 10px; margin-bottom: 30px"
        = t('.no_model_solution_present')
    .model_solutions
      - @model_solutions.each do |model_solution|
        .show-table.exercise-show
          .table-header.closed.toggle-next
            => ModelSolution.model_name.human
            => @model_solutions.find_index(model_solution) + 1
            span.fa-solid.fa-caret-down
          .test-content
            .row
              .col-auto.row-label
                = ModelSolution.human_attribute_name('description')
                | :
              .col.row-value
                = model_solution.description
            .row
              .col-auto.row-label
                = ModelSolution.human_attribute_name('internal_description')
                | :
              .col.row-value
                = model_solution.internal_description
            .row
              .col-auto.row-label
                = ModelSolution.human_attribute_name('xml_id')
                | :
              .col.row-value
                = model_solution.xml_id

            .files-header.my-1
              strong
                = label nil, "#{Task.human_attribute_name('files')}:"
            .files
              - model_solution.files.each do |file|
                .show-table.exercise-show
                  .table-header.closed.toggle-next
                    => file.full_file_name
                    span.fa-solid.fa-caret-down
                  .file-content
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('name')
                        | :
                      .col.row-value
                        = file.name
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('path')
                        | :
                      .col.row-value
                        = file.path
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('internal_description')
                        | :
                      .col.row-value
                        = file.internal_description
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('xml_id')
                        | :
                      .col.row-value
                        = file.xml_id
                    - if file.attachment.blank?
                      .row
                        .editor.readonly data-file-name=file.name
                          = file.content
                    - else
                      .row.vertical
                        .col.row-label
                          = TaskFile.human_attribute_name('attachment')
                          | :
                        .row-value
                          - if file.attachment.image?
                            = image_tag(file.attachment.variant(resize_to_limit: [900, 900]))
                          - else
                            = link_to file.attachment.filename, download_attachment_task_file_path(file), 'data-turbolinks': false
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('used_by_grader')
                        | :
                      .col.row-value
                        = file.used_by_grader
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('visible')
                        | :
                      .col.row-value
                        = file.visible
                    .row
                      .col-auto.row-label
                        = TaskFile.human_attribute_name('usage_by_lms')
                        | :
                      .col.row-value
                        = file.usage_by_lms
.row
  .col-md-4.col-sm-6.mb-3.p-0
    .button-box.border.p-3.h-100
      .button-description
        = t('.add_to_collection_hint')
      .wrapper
        - if policy(@task).add_to_collection?
          .dropdown.btn-group
            = button_tag class: 'btn btn-light dropdown-toggle', 'data-bs-toggle': 'dropdown' do
              = t('.button.add_to_collection')
            ul.scrollable.dropdown-menu role='menu'
              - current_user.collections.order(created_at: :desc).each do |collection|
                li
                  - if collection.tasks.include?(@task)
                    = link_to remove_task_collection_path(collection, task: @task, return_to_task: true), method: :patch, class: 'dropdown-item', data: {confirm: t('.remove_task_from_collection_warning')} do
                      span.collection-checkmark
                        = "✓ #{collection.title}"
                  - else
                    = link_to add_to_collection_task_path(collection:), method: :post, class: 'dropdown-item' do
                      span.collection-checkmark
                        = collection.title

              li
                hr.dropdown-divider
              li
                = form_with model: Collection.new, url: collections_path do |f|
                  .create-collection.input-group
                    = f.text_field :title, class: 'form-control custom-input', placeholder: t('.create_collection_placeholder')
                    = f.hidden_field :task_ids, value: @task.id
                    = f.submit class: 'btn btn-light submit', value: t('.button.create_collection')
        - else
          div data-bs-toggle='tooltip' title=t('.guest.disabled.tooltip') data-bs-delay=150
            = button_tag class: 'btn btn-outline-dark dropdown-toggle disabled', 'data-bs-toggle': 'dropdown' do
              = t('.button.add_to_collection')

  .col-md-4.col-sm-6.mb-3.p-0
    .button-box.border.p-3.h-100
      .button-description
        = t('.button.download_as_zip')
      .wrapper
        - if policy(@task).download?
          = link_to t('common.button.download_zip'), download_task_path(@task), class: 'btn btn-light', 'data-turbolinks' => false
        - else
          div data-bs-toggle='tooltip' title=t('.guest.disabled.tooltip') data-bs-delay=150
            = link_to t('common.button.download_zip'), download_task_path(@task), class: 'btn btn-outline-dark disabled', 'data-turbolinks' => false

        - if policy(@task).export_external_start?
          .dropdown.btn-group
            = button_tag class: 'btn btn-light dropdown-toggle', 'data-bs-toggle': 'dropdown' do
              = t('.button.export')
            ul.scrollable.dropdown-menu role='menu'
              li.dropdown-header = "#{t('tasks.show.export_to')}: "
              - if current_user.available_account_links.empty?
                li.p-2.px-3
                  = link_to t('.define_account_link'), new_user_account_link_path(current_user)
              - else
                - current_user.available_account_links.each do |acc_link|
                  li
                    = link_to acc_link.name, export_external_start_task_path(account_link: acc_link), method: :post, remote: true, class: 'dropdown-item export-test'
        - else
          div data-bs-toggle='tooltip' title=t('.guest.disabled.tooltip') data-bs-delay=150
            = button_tag class: 'btn btn-outline-dark dropdown-toggle disabled', 'data-bs-toggle': 'dropdown' do
              = t('.button.export')

  .col-md-12.pb-3.mt-3
    .expandable-panel
      = button_tag type: 'button', class: 'full-window-button show-comment-button', data: {task_id: @task.id} do
        => t('.button.show_comments')
        span.fa-solid.fa-circle-notch.fa-spin.wait style="display:none;margin-right:5px;"
        span.fa-solid.fa-caret-down.my-caret
      .comment-box.with-borders.border-top-0 data-task=@task.id
        = form_for :comment, url: task_comments_path(@task), remote: true do |f|
          .write-comment
            - if policy(Comment).new?
              .input-group
                = f.label 'new_comment_label', t('tasks.shared.new_comment'), class: 'input-group-text'
                = f.text_field :text, class: 'form-control'
                = f.submit t('common.button.save_object', model: Comment.model_name.human), class: 'btn btn-light'
            - else
              .input-group data-bs-toggle='tooltip' title=t('.guest.disabled.tooltip') data-bs-delay=150
                = f.label 'new_comment_label', t('tasks.shared.new_comment'), class: 'input-group-text'
                = f.text_field :text, class: 'form-control', disabled: true
                = f.submit t('common.button.save_object', model: Comment.model_name.human), class: 'btn btn-outline-dark disabled'
        .comment-body

    .actions.btn-group role='group'
      - if policy(@task).edit?
        = link_to edit_task_path(@task), class: 'btn btn-important' do
          i.fa-solid.fa-pen-to-square
          =< t('common.button.edit')
      - if policy(@task).destroy?
        = link_to task_path(@task), class: 'btn btn-important', method: :delete, data: {confirm: t('common.sure')} do
          i.fa-solid.fa-trash-can
          =< t('common.button.delete')

      - if policy(@task).duplicate?
        = link_to duplicate_task_path(@task), method: :post, class: 'btn btn-important' do
          i.fa-regular.fa-clone
          =< t('common.button.duplicate')
      - else
        div data-bs-toggle='tooltip' title=t('.guest.disabled.tooltip') data-bs-delay=150
          = link_to duplicate_task_path(@task), method: :post, class: 'btn btn-important disabled' do
            i.fa-regular.fa-clone
            =< t('common.button.duplicate')

      - if current_user.present?
        = link_to t('common.button.back'), tasks_path, class: 'btn btn-important'

    /= form_tag report_exercise_path(@task), id: 'report'

    #page_end style="margin-top: 20px"


    = render 'import_export_dialog', title: t('.button.export_tasks')
